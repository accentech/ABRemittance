<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountNo" xml:space="preserve">
    <value>Account #</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="AdjustAmount" xml:space="preserve">
    <value>Adjust. Amt.</value>
  </data>
  <data name="AdjustmentName" xml:space="preserve">
    <value>Adjustment Name</value>
  </data>
  <data name="AdjustmentSetup" xml:space="preserve">
    <value>Adjustment Setup</value>
  </data>
  <data name="Amount" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="AmountAfterDiscount" xml:space="preserve">
    <value>Amount After Discount</value>
  </data>
  <data name="ApplyMode" xml:space="preserve">
    <value>Apply Mode</value>
  </data>
  <data name="AvailabelCreditLimit" xml:space="preserve">
    <value>Availabel Credit Limit</value>
  </data>
  <data name="Bank" xml:space="preserve">
    <value>Bank</value>
  </data>
  <data name="CalculationOn" xml:space="preserve">
    <value>Calculation On</value>
  </data>
  <data name="Cheque" xml:space="preserve">
    <value>Cheque #</value>
  </data>
  <data name="ContactName" xml:space="preserve">
    <value>Contact Name</value>
  </data>
  <data name="ContactPhone" xml:space="preserve">
    <value>Contact Phone</value>
  </data>
  <data name="CustomType" xml:space="preserve">
    <value>Custom Type</value>
  </data>
  <data name="Dealer" xml:space="preserve">
    <value>Dealer</value>
  </data>
  <data name="DefaultValue" xml:space="preserve">
    <value>Default Value</value>
  </data>
  <data name="DeliverySite" xml:space="preserve">
    <value>Delivery Site</value>
  </data>
  <data name="DeliveryZone" xml:space="preserve">
    <value>Delivery District</value>
  </data>
  <data name="DiscountAuthorization" xml:space="preserve">
    <value>Discount Authorization</value>
  </data>
  <data name="DueAdvancedAdjustment" xml:space="preserve">
    <value>Due/Advanced Adjustment</value>
  </data>
  <data name="Grade" xml:space="preserve">
    <value>Grade</value>
  </data>
  <data name="InternalUse" xml:space="preserve">
    <value>Internal Use</value>
  </data>
  <data name="InvoiceDate" xml:space="preserve">
    <value>Invoice Date</value>
  </data>
  <data name="InvoiceList" xml:space="preserve">
    <value>Invoice List</value>
  </data>
  <data name="InvoiceNo" xml:space="preserve">
    <value>Invoice No</value>
  </data>
  <data name="Irregular" xml:space="preserve">
    <value>Irregular</value>
  </data>
  <data name="Lot" xml:space="preserve">
    <value>Lot</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Note" xml:space="preserve">
    <value>Note</value>
  </data>
  <data name="PackQuantity" xml:space="preserve">
    <value>Sales Quantity</value>
  </data>
  <data name="PaymentDate" xml:space="preserve">
    <value>Payment Date</value>
  </data>
  <data name="PaymentMode" xml:space="preserve">
    <value>Payment Mode</value>
  </data>
  <data name="Percentage" xml:space="preserve">
    <value>Percentage</value>
  </data>
  <data name="ProductCode" xml:space="preserve">
    <value>Product Code</value>
  </data>
  <data name="ProductType" xml:space="preserve">
    <value>Product Type</value>
  </data>
  <data name="Regular" xml:space="preserve">
    <value>Regular</value>
  </data>
  <data name="Sales" xml:space="preserve">
    <value>Sales</value>
  </data>
  <data name="SalesDetail" xml:space="preserve">
    <value>Sales Detail</value>
  </data>
  <data name="SalesPayment" xml:space="preserve">
    <value>Sales Payment</value>
  </data>
  <data name="SalesQuantity" xml:space="preserve">
    <value>Sales Quantity</value>
  </data>
  <data name="Sample" xml:space="preserve">
    <value>Sample</value>
  </data>
  <data name="Size" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="SN" xml:space="preserve">
    <value>SN</value>
  </data>
  <data name="SpecialDiscount" xml:space="preserve">
    <value>Special Discount</value>
  </data>
  <data name="StockQuantity" xml:space="preserve">
    <value>Stock Quantity</value>
  </data>
  <data name="TitleFGSale" xml:space="preserve">
    <value>Product Sale</value>
  </data>
  <data name="UnitPrice" xml:space="preserve">
    <value>Unit Price</value>
  </data>
  <data name="UnitPriceDiscount" xml:space="preserve">
    <value>Unit Price Discount</value>
  </data>
  <data name="UpdateAuthorization" xml:space="preserve">
    <value>Update Authorization</value>
  </data>
  <data name="TotalPayable" xml:space="preserve">
    <value>Total Payable</value>
  </data>
  <data name="GradeReq" xml:space="preserve">
    <value>Grade Required for all Sales Detail</value>
  </data>
  <data name="ItemRequired" xml:space="preserve">
    <value>Item Required for all Sales Detail</value>
  </data>
  <data name="LotReq" xml:space="preserve">
    <value>Lot Required for all Sales Detail</value>
  </data>
  <data name="PackQtyReq" xml:space="preserve">
    <value>Pack Qty Required for all Sales Detail</value>
  </data>
  <data name="TotalAmount" xml:space="preserve">
    <value>Total Amount :</value>
  </data>
  <data name="FreeOfCost" xml:space="preserve">
    <value>Free Of Cost</value>
  </data>
  <data name="BalanceExceed" xml:space="preserve">
    <value>Balance Exceed.</value>
  </data>
  <data name="DuplicateData" xml:space="preserve">
    <value>Same Item and Grade and Lot already Selected.</value>
  </data>
  <data name="FGSaleDeleteFailed" xml:space="preserve">
    <value>Finished Good Sale Deleted Failed</value>
  </data>
  <data name="FGSaleDeleteSuccess" xml:space="preserve">
    <value>Finished Good Sale Deleted Successfully!</value>
  </data>
  <data name="FGSaleSaveFailed" xml:space="preserve">
    <value>Finished Good Sale Saved Failed!</value>
  </data>
  <data name="FGSaleSaveSuccess" xml:space="preserve">
    <value>Finished Good Sale saved successfully!</value>
  </data>
  <data name="FGSaleUpdateFailed" xml:space="preserve">
    <value>Finished Good Sale Update Failed!</value>
  </data>
  <data name="FGSaleUpdateSuccess" xml:space="preserve">
    <value>Finished Good Sale Update Successfully!</value>
  </data>
  <data name="LargeDiscount" xml:space="preserve">
    <value>Discount is larger than Unit price.</value>
  </data>
  <data name="Company" xml:space="preserve">
    <value>Company</value>
  </data>
  <data name="Customer" xml:space="preserve">
    <value>Self Delivery</value>
  </data>
  <data name="DeliverBy" xml:space="preserve">
    <value>Delivery Option</value>
  </data>
  <data name="Discount" xml:space="preserve">
    <value>Discount</value>
  </data>
  <data name="DiscountOver" xml:space="preserve">
    <value>Discount amount is larger than total amount.</value>
  </data>
  <data name="FilePath" xml:space="preserve">
    <value>File Path</value>
  </data>
  <data name="TotalDueAdvanceAmount" xml:space="preserve">
    <value>Total Due/Advance Amount</value>
  </data>
  <data name="TotalPayableAfterDiscount" xml:space="preserve">
    <value>Total Payable After Discount</value>
  </data>
  <data name="FileReq" xml:space="preserve">
    <value>Discount File Required.</value>
  </data>
  <data name="BankAccountRequ" xml:space="preserve">
    <value>Account No. Required for every Online Payment.</value>
  </data>
  <data name="BankReq" xml:space="preserve">
    <value>Bank Name Required for every CD/PDC Payment.</value>
  </data>
  <data name="ChequeReq" xml:space="preserve">
    <value>Cheque No. Required for every CD/PDC Payment.</value>
  </data>
  <data name="FGSaleApproveFailed" xml:space="preserve">
    <value>Finished Good Sale Approve Failed</value>
  </data>
  <data name="FGSaleApproveSuccessful" xml:space="preserve">
    <value>Finished Good Sale Approve Successfull!</value>
  </data>
  <data name="FGSaleReviewFailed" xml:space="preserve">
    <value>Finished Good Sale Review Failed</value>
  </data>
  <data name="FGSaleReviewSuccessful" xml:space="preserve">
    <value>Finished Good Sale Review Successfull!</value>
  </data>
  <data name="CommissionPeriod" xml:space="preserve">
    <value>Commission Periods</value>
  </data>
  <data name="DeliveryByCustomerCheck" xml:space="preserve">
    <value>Delivery Option must be Self Delivery.</value>
  </data>
  <data name="BreakagePeriod" xml:space="preserve">
    <value>Breakage Period</value>
  </data>
  <data name="Period" xml:space="preserve">
    <value>Period</value>
  </data>
  <data name="UnitPriceReqPart1" xml:space="preserve">
    <value>Unit price of Sl#</value>
  </data>
  <data name="UnitPriceReqPart2" xml:space="preserve">
    <value> is zero</value>
  </data>
</root>