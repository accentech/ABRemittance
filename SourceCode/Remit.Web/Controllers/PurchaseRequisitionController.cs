using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Remit.CachingService;
using Remit.Model.Models;
using Remit.Service;
using Helpers;
using Remit.Web.Helpers;
using Remit.Service.Enums;
using System.Linq.Dynamic;
using Remit.Web.Models;
using System.Text.RegularExpressions;
using System.Web.Configuration;

namespace Remit.Web.Controllers
{
    public class PurchaseRequisitionController : Controller
    {
        public readonly IPurchaseRequisitionService purchaseRequisitionService;
        public readonly IPurchaseRequisitionDetailService purchaseRequisitionDetailService;
        public readonly ISubModuleItemService subModuleItemService;
        public readonly IItemService itemService;
        public readonly IRoleSubModuleItemService roleSubModuleItemService;
        public readonly IWorkflowactionSettingService workflowactionSettingService;
        public readonly INotificationSettingService notificationSettingService;
        public readonly IAutoGeneratedNoService autoGeneratedNoService;

        public readonly ISupplierService supplierService;
        private static readonly ICacheProvider cacheProvider = new DefaultCacheProvider();

        protected long timeZoneOffset = UserSession.GetTimeZoneOffset();

        public PurchaseRequisitionController(ISupplierService supplierService, IPurchaseRequisitionService purchaseRequisitionService,
            ISubModuleItemService subModuleItemService, IRoleSubModuleItemService roleSubModuleItemService,
            IPurchaseRequisitionDetailService purchaseRequisitionDetailService, IWorkflowactionSettingService workflowactionSettingService,
            INotificationSettingService notificationSettingService, IItemService itemService, IAutoGeneratedNoService autoGeneratedNoService)
        {
            this.supplierService = supplierService;
            this.autoGeneratedNoService = autoGeneratedNoService;
            this.purchaseRequisitionService = purchaseRequisitionService;
            this.subModuleItemService = subModuleItemService;
            this.roleSubModuleItemService = roleSubModuleItemService;
            this.purchaseRequisitionDetailService = purchaseRequisitionDetailService;

            this.workflowactionSettingService = workflowactionSettingService;
            this.notificationSettingService = notificationSettingService;
            this.itemService = itemService;
        }

        //const string url = "/PurchaseRequisition/Index";
        string dateTimeFormat = WebConfigurationManager.AppSettings["DateTimeFormat"];
        string cacheKey = "permission:purchaseRequisition" + Helpers.UserSession.GetUserFromSession().RoleId;
        RoleSubModuleItem permission = null;

        // GET: /PurchaseRequisition/Index
        public ActionResult Index()
        {
            string url = "/PurchaseRequisition/Index";
            ViewBag.GroupType = WebConfigurationManager.AppSettings["GroupType"];
            Session["GroupT"] = "raw";
            cacheKey += WebConfigurationManager.AppSettings["GroupType"];
            return CommonPurchaseRequisitionList(url, cacheKey, "PurchaseRequisition");
        }

        public ActionResult SparePartsAndOtherIndex()
        {
            string url = "/PurchaseRequisition/SparePartsAndOtherIndex";
            ViewBag.GroupType = "";
            Session["GroupT"] = "spare";
            return CommonPurchaseRequisitionList(url, cacheKey, "PurchaseRequisition");
        }
        
        public ActionResult CommonPurchaseRequisitionList(string url, string cacheKey, string viewName)
        {
            RoleSubModuleItem permissionGroup = (RoleSubModuleItem)cacheProvider.Get(cacheKey) ??
                                                roleSubModuleItemService.GetRoleSubModuleItemBySubModuleIdandRole(url, Helpers.UserSession.GetUserFromSession().RoleId);
            if (permissionGroup != null)
            {
                if (permissionGroup.ReadOperation == true)
                {
                    cacheProvider.Set(cacheKey, permissionGroup, 240);
                    return View(viewName);
                }
                else
                {
                    return View("~/Views/Shared/NoPermission.cshtml");
                }
            }
            return View("~/Views/Shared/NoPermission.cshtml");
        }
        // homepage to pending PR
        public ActionResult IndexPending()
        {
            ViewBag.GroupType = "";
            //Session["GroupT"] = "spare";
            const string url = "/PurchaseRequisition/Index"; 
            return CommonPurchaseRequisitionList(url, cacheKey, "PurchaseRequisition");
        }

        [HttpPost]
        public JsonResult CreatePurchaseRequisition(PurchaseRequisition purchaseRequisition)
        {
            var isSuccess = false;
            var message = string.Empty;
            try
            {
                var isNew = purchaseRequisition.Id == Guid.Empty ? true : false;

                string url = string.Empty;
                if ((string)Session["GroupT"] == "raw")
                {
                    url = "/PurchaseRequisition/Index";
                    cacheKey += WebConfigurationManager.AppSettings["GroupType"];
                }
                else
                {
                    url = "/PurchaseRequisition/SparePartsAndOtherIndex";
                }




                permission = (RoleSubModuleItem)cacheProvider.Get(cacheKey) ??
                                  roleSubModuleItemService.GetRoleSubModuleItemBySubModuleIdandRole(url,
                                      Helpers.UserSession.GetUserFromSession().RoleId);
                if (isNew)
                {
                    purchaseRequisition.Id = Guid.NewGuid();
                    purchaseRequisition.IsAutoGenerated = false;
                    purchaseRequisition.Status =(int?)CommonEnum.Pending;
                    foreach (var a in purchaseRequisition.PurchaseRequisitionDetails)
                    {
                        a.Id = Guid.NewGuid();
                        a.PurchaseRequisitionId = purchaseRequisition.Id;
                        a.IsReceived = false;
                    }
                    if (permission.CreateOperation == true)
                    {
                        if (this.purchaseRequisitionService.CreatePurchaseRequisition(purchaseRequisition))
                        {
                            if (autoGeneratedNoService.UpdateNo("Requisition")) { }
                            isSuccess = true;
                            message = string.Format(Resources.ResourceCommon.CMsg_save, Resources.ResourcePurchaseRequisition.LblPurchaseRequisition);
                        }
                        else
                        {
                            message = string.Format(Resources.ResourceCommon.CMsg_unsave, Resources.ResourcePurchaseRequisition.LblPurchaseRequisition);
                        }
                    }
                    else
                    {
                        message = Resources.ResourceCommon.MsgNoPermissionToCreate;
                    }
                }
                else
                {
                    if (permission.UpdateOperation == true)
                    {
                        var purchaseRequisitionObj = this.purchaseRequisitionService.GetPurchaseRequisition(purchaseRequisition.Id);
                        if (purchaseRequisitionObj.PurchaseRequisitionDetails != null)
                        {
                            foreach (var a in purchaseRequisitionObj.PurchaseRequisitionDetails.ToList())
                            {
                                this.purchaseRequisitionDetailService.DeletePurchaseRequisitionDetail(a.Id);
                            }
                        }

                        if (purchaseRequisition.PurchaseRequisitionDetails != null)
                        {
                            foreach (var a in purchaseRequisition.PurchaseRequisitionDetails)
                            {
                                a.Id = Guid.NewGuid();
                                a.PurchaseRequisitionId = purchaseRequisition.Id;
                                this.purchaseRequisitionDetailService.CreatePurchaseRequisitionDetail(a);
                            }
                        }

                        purchaseRequisitionObj.RequisitionNo = purchaseRequisition.RequisitionNo;
                        purchaseRequisitionObj.RequisitionDate = purchaseRequisition.RequisitionDate;
                        purchaseRequisitionObj.RequisitionBy = purchaseRequisition.RequisitionBy;
                        purchaseRequisitionObj.IsLCRequired = purchaseRequisition.IsLCRequired;

                        if (this.purchaseRequisitionService.UpdatePurchaseRequisition(purchaseRequisitionObj))
                        {
                            isSuccess = true;
                            message = string.Format(Resources.ResourceCommon.CMsg_update, Resources.ResourcePurchaseRequisition.LblPurchaseRequisition);
                        }
                        else
                        {
                            message = string.Format(Resources.ResourceCommon.CMsg_notupdate, Resources.ResourcePurchaseRequisition.LblPurchaseRequisition);
                        }
                    }
                    else
                    {
                        message = Resources.ResourceCommon.MsgNoPermissionToUpdate;
                    }
                }
            }
            catch (Exception ex)
            {
                isSuccess = false;
                message = ex.Message;
            }

            return Json(new
            {
                isSuccess = isSuccess,
                message = message,
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult DeletePurchaseRequisition(PurchaseRequisition purchaseRequisition)
        {
            var isSuccess = true;
            var message = string.Empty;

            string url = string.Empty;
            if ((string)Session["GroupT"] == "raw")
            {
                url = "/PurchaseRequisition/Index";
                cacheKey += WebConfigurationManager.AppSettings["GroupType"];
            }
            else
            {
                url = "/PurchaseRequisition/SparePartsAndOtherIndex";
            }



            permission = (RoleSubModuleItem)cacheProvider.Get(cacheKey) ?? roleSubModuleItemService.GetRoleSubModuleItemBySubModuleIdandRole(url,
                                Helpers.UserSession.GetUserFromSession().RoleId);

            if (permission.DeleteOperation == true)
            {
                foreach (var a in purchaseRequisition.PurchaseRequisitionDetails.ToList())
                {
                    this.purchaseRequisitionDetailService.DeletePurchaseRequisitionDetail(a.Id);
                }
                isSuccess = this.purchaseRequisitionService.DeletePurchaseRequisition(purchaseRequisition.Id);
                if (isSuccess)
                {
                    message = string.Format(Resources.ResourceCommon.CMsg_delete, Resources.ResourcePurchaseRequisition.LblPurchaseRequisition);
                }
                else
                {
                    message = string.Format(Resources.ResourceCommon.CMsg_notdelete, Resources.ResourcePurchaseRequisition.LblPurchaseRequisition);
                }
            }
            else
            {
                message = Resources.ResourceCommon.MsgNoPermissionToDelete;
            }

            return Json(new
            {
                isSuccess = isSuccess,
                message = message
            }, JsonRequestBehavior.AllowGet);
        }

        // Approve Purchase Requisition.....
        [HttpPost]
        public JsonResult ApprovePurchaseRequisition(PurchaseRequisition purchaseRequisition)
        {
            var isSuccess = true;
            var message = string.Empty;
            try
            {
                string url = string.Empty;
                if ((string)Session["GroupT"] == "raw")
                {
                    url = "/PurchaseRequisition/Index";
                    cacheKey += WebConfigurationManager.AppSettings["GroupType"];
                }
                else
                {
                    url = "/PurchaseRequisition/SparePartsAndOtherIndex";
                }



                var purchaseRequisitionObj = this.purchaseRequisitionService.GetPurchaseRequisition(purchaseRequisition.Id);
                permission = (RoleSubModuleItem)cacheProvider.Get(cacheKey) ??
                             roleSubModuleItemService.GetRoleSubModuleItemBySubModuleIdandRole(url,
                                 Helpers.UserSession.GetUserFromSession().RoleId);

				WorkflowactionSetting workflowactionSettingObj = this.workflowactionSettingService.GetAllWorkflowactionSetting().Where(a => a.EmployeeId == UserSession.GetUserFromSession().EmployeeId &&a.SubModuleItem.UrlPath == url &&a.WorkflowactionId == (int)WorkFlowActionEnum.Review).FirstOrDefault();
					
				if (permission.UpdateOperation == true && workflowactionSettingObj != null)
                {
                    if (purchaseRequisitionObj != null)
                    {
                        purchaseRequisitionObj.ApprovedBy = UserSession.GetUserFromSession().EmployeeId;
                        purchaseRequisitionObj.ApprovedDate = DateTime.UtcNow;
                        purchaseRequisitionObj.Status = (int?)CommonEnum.Approved;
                       
                        if (this.purchaseRequisitionService.UpdatePurchaseRequisition(purchaseRequisitionObj))
                        {
                            isSuccess = true;
                            message = string.Format(Resources.ResourcePurchaseRequisition.LblApprovedMsg);
                        }
                        else
                        {
                            message = string.Format(Resources.ResourceCommon.MsgNot_approve, Resources.ResourcePurchaseRequisition.LblPurchaseRequisition);
                        }
                    }
                }
                else
                {
                    message = Resources.ResourceCommon.MsgNoPermissionToApprove;
                }
            }
            catch (Exception ex)
            {
                isSuccess = false;
                message = ex.Message;
            }

            return Json(new
            {
                isSuccess = isSuccess,
                message = message
            }, JsonRequestBehavior.AllowGet);
        }

        // Review purchase Requisition
        [HttpPost]
        public JsonResult ReviewPurchaseRequisition(PurchaseRequisition purchaseRequisition)
        {
            var isSuccess = true;
            var message = string.Empty;
            try
            {
                string url = string.Empty;
                if ((string)Session["GroupT"] == "raw")
                {
                    url = "/PurchaseRequisition/Index";
                    cacheKey += WebConfigurationManager.AppSettings["GroupType"];
                }
                else
                {
                    url = "/PurchaseRequisition/SparePartsAndOtherIndex";
                }


                var statusReview = (int)WorkFlowActionEnum.Review;
                var user = UserSession.GetUserFromSession().EmployeeId;
                WorkflowactionSetting workflowactionSettingObj = WorkflowactionSettingObj(user, url, statusReview);
                if (workflowactionSettingObj != null)
                {
                    var purchaseRequisitionObj = this.purchaseRequisitionService.GetPurchaseRequisition(purchaseRequisition.Id);

                    purchaseRequisitionObj.ReviewedBy = UserSession.GetUserFromSession().EmployeeId;
                    purchaseRequisitionObj.ReviewedDate = DateTime.UtcNow;
                    purchaseRequisitionObj.Status = (int?)CommonEnum.Review;

                    if (this.purchaseRequisitionService.UpdatePurchaseRequisition(purchaseRequisitionObj))
                    {
                        isSuccess = true;
                        message = string.Format(Resources.ResourcePurchaseRequisition.Msg_Review);
                    }
                    else
                    {
                        message = string.Format(Resources.ResourceCommon.MsgNot_review);
                    }
                }
                else
                {
                    message = Resources.ResourceCommon.MsgNoPermissionToReview;
                    isSuccess = false;
                }
            }
            catch (Exception ex)
            {
                isSuccess = false;
                message = ex.Message;
            }

            return Json(new
            {
                isSuccess = isSuccess,
                message = message
            }, JsonRequestBehavior.AllowGet);
        }

        public WorkflowactionSetting WorkflowactionSettingObj(int? employeeId, string url, int workFlowStatusEnum)
        {
            return this.workflowactionSettingService
                .GetAllWorkflowactionSetting().Where(app => app.EmployeeId == employeeId &&
                                                            app.SubModuleItem.UrlPath == url &&
                                                            app.WorkflowactionId == workFlowStatusEnum).FirstOrDefault();
        }

        //Reject PURCHASE REQUISITION..............
        [HttpPost]
        public JsonResult RejectPurchaseRequisition(PurchaseRequisition purchaseRequisition)
        {
            var isSuccess = true;
            var message = string.Empty;
            try
            {
                string url = string.Empty;
                if ((string)Session["GroupT"] == "raw")
                {
                    url = "/PurchaseRequisition/Index";
                    cacheKey += WebConfigurationManager.AppSettings["GroupType"];
                }
                else
                {
                    url = "/PurchaseRequisition/SparePartsAndOtherIndex";
                }



                var statusReject = (int)WorkFlowActionEnum.ApproveReject;
                var user = UserSession.GetUserFromSession().EmployeeId;
                WorkflowactionSetting workflowactionSettingObj = WorkflowactionSettingObj(user, url, statusReject);
                if (workflowactionSettingObj != null)
                {
                    var purchaseRequisitionObj = this.purchaseRequisitionService.GetPurchaseRequisition(purchaseRequisition.Id);
                   
                    purchaseRequisitionObj.Status = (int?)CommonEnum.Rejected;
                    purchaseRequisitionObj.Remarks = purchaseRequisition.Remarks;
                   
                    if (this.purchaseRequisitionService.UpdatePurchaseRequisition(purchaseRequisitionObj))
                    {
                        isSuccess = true;
                        message = string.Format(Resources.ResourcePurchaseRequisition.Msg_Reject);
                    }
                    else
                    {
                        message = string.Format(Resources.ResourcePurchaseRequisition.MsgNot_Reject);
                    }

                }
                else
                {
                    message = Resources.ResourceCommon.MsgNoPermissionToReject;
                    isSuccess = false;
                }
            }
            catch (Exception ex)
            {
                isSuccess = false;
                message = ex.Message;
            }

            return Json(new
            {
                isSuccess = isSuccess,
                message = message
            }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetPurchaseRequisition(Guid id)
        {
            var purchaseRequisition = this.purchaseRequisitionService.GetPurchaseRequisition(id);
            PurchaseRequisitionViewModel purchaseRequisitionTemp = null;

            if (purchaseRequisition != null)
            {
                purchaseRequisitionTemp = new PurchaseRequisitionViewModel();
                purchaseRequisitionTemp.Id = purchaseRequisition.Id;
                purchaseRequisitionTemp.RequisitionNo = purchaseRequisition.RequisitionNo;
                purchaseRequisitionTemp.RequisitionDate = purchaseRequisition.RequisitionDate != null ? purchaseRequisition.RequisitionDate.Value.ToString(dateTimeFormat) : "";
                purchaseRequisitionTemp.RequisitionBy = purchaseRequisition.RequisitionBy;
                
                if (purchaseRequisition.Employee1!=null)
                {
                    purchaseRequisitionTemp.RequisitionByName = purchaseRequisition.Employee1.FullName;   
                }
               
                purchaseRequisitionTemp.ApprovedBy = purchaseRequisition.ApprovedBy;
                
                if (purchaseRequisition.Employee != null) 
                { 
                    purchaseRequisitionTemp.ApprovedByName = purchaseRequisition.Employee.FullName;
                }
                purchaseRequisitionTemp.ApprovedDate = purchaseRequisition.ApprovedDate != null ? purchaseRequisition.ApprovedDate.Value.AddMinutes(timeZoneOffset).ToString(dateTimeFormat) : "";
                purchaseRequisitionTemp.ReviewedBy = purchaseRequisition.ReviewedBy;
    
                if (purchaseRequisition.Employee2 != null)
                {
                    purchaseRequisitionTemp.ReviewedByName = purchaseRequisition.Employee2.FullName;
                  
                }
                
                purchaseRequisitionTemp.ReviewedDate = purchaseRequisition.ReviewedDate != null ? purchaseRequisition.ReviewedDate.Value.AddMinutes(timeZoneOffset).ToString(dateTimeFormat) : "";              
                purchaseRequisitionTemp.IsAutoGenerated = purchaseRequisition.IsAutoGenerated;
                purchaseRequisitionTemp.IsLCRequired = purchaseRequisition.IsLCRequired;
                purchaseRequisitionTemp.Status = purchaseRequisition.Status;
                purchaseRequisitionTemp.Remarks = purchaseRequisition.Remarks;
               
                if (purchaseRequisition.PurchaseRequisitionDetails.Count() > 0)
                {
                    List<PurchaseRequisitionDetailViewModel> purchaseRequisitionDetailVMList = new List<PurchaseRequisitionDetailViewModel>();
                    foreach (var purchaseRequisitionDetai in purchaseRequisition.PurchaseRequisitionDetails.OrderBy(a => a.Item.ItemCategory.Name).ThenBy(b => b.Item.Name))
                    {
                        PurchaseRequisitionDetailViewModel purchaseRequisitionDetailTtemp = new PurchaseRequisitionDetailViewModel();
                        purchaseRequisitionDetailTtemp.Id = purchaseRequisitionDetai.Id;
                        purchaseRequisitionDetailTtemp.PurchaseRequisitionId = purchaseRequisitionDetai.PurchaseRequisitionId;
                        purchaseRequisitionDetailTtemp.ItemId = purchaseRequisitionDetai.ItemId;
                        purchaseRequisitionDetailTtemp.ItemName = purchaseRequisitionDetai.Item.Name;
                        if (purchaseRequisitionDetai.Item!=null)
                        {
                            purchaseRequisitionDetailTtemp.ItemCategoryId = purchaseRequisitionDetai.Item.ItemCategoryId;   
                        }
                       
                        purchaseRequisitionDetailTtemp.Quantity = purchaseRequisitionDetai.Quantity;
                        purchaseRequisitionDetailTtemp.UnitId = purchaseRequisitionDetai.UnitId;
                        if (purchaseRequisitionDetai.UnitOfMeasurement!=null)
                        {
                            purchaseRequisitionDetailTtemp.UnitName = purchaseRequisitionDetai.UnitOfMeasurement.Name;   
                        }
                       
                        purchaseRequisitionDetailTtemp.Usage = purchaseRequisitionDetai.Usage;
                        purchaseRequisitionDetailTtemp.IsReceived = purchaseRequisitionDetai.IsReceived;
                        purchaseRequisitionDetailVMList.Add(purchaseRequisitionDetailTtemp);
                    }
                    purchaseRequisitionTemp.PurchaseRequisitionDetails = purchaseRequisitionDetailVMList;
                }
            }
            return Json(purchaseRequisitionTemp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetPurchaseRequisitionList()
        {
            var purchaseRequisitionListObj = this.purchaseRequisitionService.GetAllPurchaseRequisition();
            List<PurchaseRequisitionViewModel> purchaseRequisitionVMList = new List<PurchaseRequisitionViewModel>();

            foreach (var purchaseRequisition in purchaseRequisitionListObj)
            {
                PurchaseRequisitionViewModel purchaseRequisitionTemp = new PurchaseRequisitionViewModel();

                purchaseRequisitionTemp.Id = purchaseRequisition.Id;
                purchaseRequisitionTemp.RequisitionNo = purchaseRequisition.RequisitionNo;
                purchaseRequisitionTemp.RequisitionDate = purchaseRequisition.RequisitionDate != null ? purchaseRequisition.RequisitionDate.Value.ToString(dateTimeFormat) : "";
                purchaseRequisitionTemp.RequisitionBy = purchaseRequisition.RequisitionBy;
                if (purchaseRequisition.Employee1!=null)
                {
                  purchaseRequisitionTemp.RequisitionByName = purchaseRequisition.Employee1.FullName;   
                }
               
                purchaseRequisitionTemp.ApprovedBy = purchaseRequisition.ApprovedBy;
                if (purchaseRequisition.Employee!=null)
                {
                   purchaseRequisitionTemp.ApprovedByName = purchaseRequisition.Employee.FullName;   
                }

                purchaseRequisitionTemp.ApprovedDate = purchaseRequisition.ApprovedDate != null ? purchaseRequisition.ApprovedDate.Value.AddMinutes(timeZoneOffset).ToString(dateTimeFormat) : "";
                purchaseRequisitionTemp.IsAutoGenerated = purchaseRequisition.IsAutoGenerated;
                purchaseRequisitionTemp.IsLCRequired = purchaseRequisition.IsLCRequired;
                purchaseRequisitionTemp.Status = purchaseRequisition.Status;
               

                purchaseRequisitionVMList.Add(purchaseRequisitionTemp);
            }
            return Json(purchaseRequisitionVMList, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetPurchaseRequisitionLCList()
        {
            var purchaseRequisitionListObj = new List<PurchaseRequisition>();
            var grpType = WebConfigurationManager.AppSettings["GroupType"];
            string url = string.Empty;
            if ((string) Session["GroupT"] == "raw")
            {
                purchaseRequisitionListObj = this.purchaseRequisitionService.GetAllPurchaseRequisition().Where(a =>
                {
                    var purchaseRequisitionDetail = a.PurchaseRequisitionDetails.FirstOrDefault(); 
                    return purchaseRequisitionDetail != null && (a.Status == (int) (CommonEnum.Approved)
                                                                                     && a.IsAutoGenerated == false && a.IsLCRequired == true &&
                                                                                     purchaseRequisitionDetail.Item.ItemCategory.ItemGroup.TypeId ==
                                                                                     Convert.ToInt32(grpType));
                }).ToList();
            }
            else
            {
                purchaseRequisitionListObj = this.purchaseRequisitionService.GetAllPurchaseRequisition().Where(a =>
                {
                    var purchaseRequisitionDetail = a.PurchaseRequisitionDetails.FirstOrDefault();
                    return purchaseRequisitionDetail != null && (a.Status == (int)(CommonEnum.Approved)
                                                                 && a.IsAutoGenerated == false && a.IsLCRequired == true &&
                                                                 purchaseRequisitionDetail.Item.ItemCategory.ItemGroup.TypeId !=
                                                                 Convert.ToInt32(grpType));
                }).ToList();
            }

            List<PurchaseRequisitionViewModel> purchaseRequisitionVMList = new List<PurchaseRequisitionViewModel>();

            foreach (var purchaseRequisition in purchaseRequisitionListObj)
            {
                PurchaseRequisitionViewModel purchaseRequisitionTemp = new PurchaseRequisitionViewModel();

                purchaseRequisitionTemp.Id = purchaseRequisition.Id;
                purchaseRequisitionTemp.RequisitionNo = purchaseRequisition.RequisitionNo;
                purchaseRequisitionTemp.RequisitionDate = purchaseRequisition.RequisitionDate != null ? purchaseRequisition.RequisitionDate.Value.ToString(dateTimeFormat) : "";
                purchaseRequisitionTemp.RequisitionBy = purchaseRequisition.RequisitionBy;
                if (purchaseRequisition.Employee1 != null)
                {
                    purchaseRequisitionTemp.RequisitionByName = purchaseRequisition.Employee1.FullName;
                }

                purchaseRequisitionTemp.ApprovedBy = purchaseRequisition.ApprovedBy;
                if (purchaseRequisition.Employee != null)
                {
                    purchaseRequisitionTemp.ApprovedByName = purchaseRequisition.Employee.FullName;
                }

                purchaseRequisitionTemp.ApprovedDate = purchaseRequisition.ApprovedDate != null ? purchaseRequisition.ApprovedDate.Value.AddMinutes(timeZoneOffset).ToString(dateTimeFormat) : "";
                purchaseRequisitionTemp.IsAutoGenerated = purchaseRequisition.IsAutoGenerated;
                purchaseRequisitionTemp.IsLCRequired = purchaseRequisition.IsLCRequired;
                purchaseRequisitionTemp.Status = purchaseRequisition.Status;


                purchaseRequisitionVMList.Add(purchaseRequisitionTemp);
            }
            return Json(purchaseRequisitionVMList, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetPurchaseRequisitionNonLCList()
        {
            var purchaseRequisitionListObj = new List<PurchaseRequisition>();
            var grpType = WebConfigurationManager.AppSettings["GroupType"];
            string url = string.Empty;
            if ((string)Session["GroupT"] == "raw")
            {
                purchaseRequisitionListObj = this.purchaseRequisitionService.GetAllPurchaseRequisition().Where(a =>
                {
                    var purchaseRequisitionDetail = a.PurchaseRequisitionDetails.FirstOrDefault();
                    return purchaseRequisitionDetail != null && (a.Status == (int)(CommonEnum.Approved)
                                                                 && a.IsLCRequired == false &&
                                                                 purchaseRequisitionDetail.Item.ItemCategory.ItemGroup.TypeId ==
                                                                 Convert.ToInt32(grpType));
                }).ToList();
            }
            else
            {
                purchaseRequisitionListObj = this.purchaseRequisitionService.GetAllPurchaseRequisition().Where(a =>
                {
                    var purchaseRequisitionDetail = a.PurchaseRequisitionDetails.FirstOrDefault();
                    return purchaseRequisitionDetail != null && (a.Status == (int)(CommonEnum.Approved)
                                                                 && a.IsLCRequired == false &&
                                                                 purchaseRequisitionDetail.Item.ItemCategory.ItemGroup.TypeId !=
                                                                 Convert.ToInt32(grpType));
                }).ToList();
            }

            List<PurchaseRequisitionViewModel> purchaseRequisitionVMList = new List<PurchaseRequisitionViewModel>();

            foreach (var purchaseRequisition in purchaseRequisitionListObj)
            {
                PurchaseRequisitionViewModel purchaseRequisitionTemp = new PurchaseRequisitionViewModel();

                purchaseRequisitionTemp.Id = purchaseRequisition.Id;
                purchaseRequisitionTemp.RequisitionNo = purchaseRequisition.RequisitionNo;
                purchaseRequisitionTemp.RequisitionDate = purchaseRequisition.RequisitionDate != null ? purchaseRequisition.RequisitionDate.Value.ToString(dateTimeFormat) : "";
                purchaseRequisitionTemp.RequisitionBy = purchaseRequisition.RequisitionBy;
                if (purchaseRequisition.Employee1 != null)
                {
                    purchaseRequisitionTemp.RequisitionByName = purchaseRequisition.Employee1.FullName;
                }

                purchaseRequisitionTemp.ApprovedBy = purchaseRequisition.ApprovedBy;
                if (purchaseRequisition.Employee != null)
                {
                    purchaseRequisitionTemp.ApprovedByName = purchaseRequisition.Employee.FullName;
                }

                purchaseRequisitionTemp.ApprovedDate = purchaseRequisition.ApprovedDate != null ? purchaseRequisition.ApprovedDate.Value.AddMinutes(timeZoneOffset).ToString(dateTimeFormat) : "";
                purchaseRequisitionTemp.IsAutoGenerated = purchaseRequisition.IsAutoGenerated;
                purchaseRequisitionTemp.IsLCRequired = purchaseRequisition.IsLCRequired;
                purchaseRequisitionTemp.Status = purchaseRequisition.Status;


                purchaseRequisitionVMList.Add(purchaseRequisitionTemp);
            }
            return Json(purchaseRequisitionVMList, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetNotReceivedPurchaseRequisitionLCList()
        {
            var prids = this.purchaseRequisitionDetailService.GetAllPurchaseRequisitionDetail().Where(a => a.IsReceived != true ).GroupBy(x => x.PurchaseRequisitionId).Select(b => b.Key);

            var purchaseRequisitionListObj = new List<PurchaseRequisition>();
            var grpType = WebConfigurationManager.AppSettings["GroupType"];
            string url = string.Empty;
            if ((string)Session["GroupT"] == "raw")
            {
                purchaseRequisitionListObj = this.purchaseRequisitionService.GetAllPurchaseRequisition().Where(a =>
                {
                    var purchaseRequisitionDetail = a.PurchaseRequisitionDetails.FirstOrDefault();
                    return purchaseRequisitionDetail != null && (a.Status == (int)(CommonEnum.Approved)
                                                                 && prids.Contains(a.Id) && a.IsLCRequired == true &&
                                                                 purchaseRequisitionDetail.Item.ItemCategory.ItemGroup.TypeId ==
                                                                 Convert.ToInt32(grpType));
                }).ToList();
            }
            else
            {
                purchaseRequisitionListObj = this.purchaseRequisitionService.GetAllPurchaseRequisition().Where(a =>
                {
                    var purchaseRequisitionDetail = a.PurchaseRequisitionDetails.FirstOrDefault();
                    return purchaseRequisitionDetail != null && (a.Status == (int)(CommonEnum.Approved)
                                                                 && a.IsLCRequired == true && prids.Contains(a.Id) &&
                                                                 purchaseRequisitionDetail.Item.ItemCategory.ItemGroup.TypeId !=
                                                                 Convert.ToInt32(grpType));
                }).ToList();
            }

            List<PurchaseRequisitionViewModel> purchaseRequisitionVMList = new List<PurchaseRequisitionViewModel>();

            foreach (var purchaseRequisition in purchaseRequisitionListObj)
            {
                PurchaseRequisitionViewModel purchaseRequisitionTemp = new PurchaseRequisitionViewModel();

                purchaseRequisitionTemp.Id = purchaseRequisition.Id;
                purchaseRequisitionTemp.RequisitionNo = purchaseRequisition.RequisitionNo;
                purchaseRequisitionTemp.RequisitionDate = purchaseRequisition.RequisitionDate != null ? purchaseRequisition.RequisitionDate.Value.ToString(dateTimeFormat) : "";
                purchaseRequisitionTemp.RequisitionBy = purchaseRequisition.RequisitionBy;
                if (purchaseRequisition.Employee1 != null)
                {
                    purchaseRequisitionTemp.RequisitionByName = purchaseRequisition.Employee1.FullName;
                }

                purchaseRequisitionTemp.ApprovedBy = purchaseRequisition.ApprovedBy;
                if (purchaseRequisition.Employee != null)
                {
                    purchaseRequisitionTemp.ApprovedByName = purchaseRequisition.Employee.FullName;
                }

                purchaseRequisitionTemp.ApprovedDate = purchaseRequisition.ApprovedDate != null ? purchaseRequisition.ApprovedDate.Value.AddMinutes(timeZoneOffset).ToString(dateTimeFormat) : "";
                purchaseRequisitionTemp.IsAutoGenerated = purchaseRequisition.IsAutoGenerated;
                purchaseRequisitionTemp.IsLCRequired = purchaseRequisition.IsLCRequired;
                purchaseRequisitionTemp.Status = purchaseRequisition.Status;


                purchaseRequisitionVMList.Add(purchaseRequisitionTemp);
            }
            return Json(purchaseRequisitionVMList, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetNotReceivedPurchaseRequisitionNonLCList()
        {
            var prids = this.purchaseRequisitionDetailService.GetAllPurchaseRequisitionDetail().Where(a => a.IsReceived != true).GroupBy(x => x.PurchaseRequisitionId).Select(b => b.Key);
            //var purchaseRequisitionListObj = this.purchaseRequisitionService.GetAllPurchaseRequisition().Where(a => a.Status == (int)(CommonEnum.Approved) && prids.Contains(a.Id) && a.IsLCRequired == false);

            var purchaseRequisitionListObj = new List<PurchaseRequisition>();
            var grpType = WebConfigurationManager.AppSettings["GroupType"];
            string url = string.Empty;
            if ((string)Session["GroupT"] == "raw")
            {
                purchaseRequisitionListObj = this.purchaseRequisitionService.GetAllPurchaseRequisition().Where(a =>
                {
                    var purchaseRequisitionDetail = a.PurchaseRequisitionDetails.FirstOrDefault();
                    return purchaseRequisitionDetail != null && (a.Status == (int)(CommonEnum.Approved)
                                                                 && prids.Contains(a.Id) && a.IsLCRequired == false &&
                                                                 purchaseRequisitionDetail.Item.ItemCategory.ItemGroup.TypeId ==
                                                                 Convert.ToInt32(grpType));
                }).ToList();
            }
            else
            {
                purchaseRequisitionListObj = this.purchaseRequisitionService.GetAllPurchaseRequisition().Where(a =>
                {
                    var purchaseRequisitionDetail = a.PurchaseRequisitionDetails.FirstOrDefault();
                    return purchaseRequisitionDetail != null && (a.Status == (int)(CommonEnum.Approved)
                                                                 && prids.Contains(a.Id) && a.IsLCRequired == false &&
                                                                 purchaseRequisitionDetail.Item.ItemCategory.ItemGroup.TypeId !=
                                                                 Convert.ToInt32(grpType));
                }).ToList();
            }

            List<PurchaseRequisitionViewModel> purchaseRequisitionVMList = new List<PurchaseRequisitionViewModel>();

            foreach (var purchaseRequisition in purchaseRequisitionListObj)
            {
                PurchaseRequisitionViewModel purchaseRequisitionTemp = new PurchaseRequisitionViewModel();

                purchaseRequisitionTemp.Id = purchaseRequisition.Id;
                purchaseRequisitionTemp.RequisitionNo = purchaseRequisition.RequisitionNo;
                purchaseRequisitionTemp.RequisitionDate = purchaseRequisition.RequisitionDate != null ? purchaseRequisition.RequisitionDate.Value.ToString(dateTimeFormat) : "";
                purchaseRequisitionTemp.RequisitionBy = purchaseRequisition.RequisitionBy;
                if (purchaseRequisition.Employee1 != null)
                {
                    purchaseRequisitionTemp.RequisitionByName = purchaseRequisition.Employee1.FullName;
                }

                purchaseRequisitionTemp.ApprovedBy = purchaseRequisition.ApprovedBy;
                if (purchaseRequisition.Employee != null)
                {
                    purchaseRequisitionTemp.ApprovedByName = purchaseRequisition.Employee.FullName;
                }

                purchaseRequisitionTemp.ApprovedDate = purchaseRequisition.ApprovedDate != null ? purchaseRequisition.ApprovedDate.Value.AddMinutes(timeZoneOffset).ToString(dateTimeFormat) : "";
                purchaseRequisitionTemp.IsAutoGenerated = purchaseRequisition.IsAutoGenerated;
                purchaseRequisitionTemp.IsLCRequired = purchaseRequisition.IsLCRequired;
                purchaseRequisitionTemp.Status = purchaseRequisition.Status;

                purchaseRequisitionVMList.Add(purchaseRequisitionTemp);
            }
            return Json(purchaseRequisitionVMList, JsonRequestBehavior.AllowGet);
        }
        
        public JsonResult GetPrListByYear(int year, int month)
        {
            var purchaseRequisitionListObj = new List<PurchaseRequisition>();
            var grpType = WebConfigurationManager.AppSettings["GroupType"];
            string url = string.Empty;
            if ((string)Session["GroupT"] == "raw")
            {
                purchaseRequisitionListObj = this.purchaseRequisitionService.GetAllPurchaseRequisition().Where(a =>
                {
                    var purchaseRequisitionDetail = a.PurchaseRequisitionDetails.FirstOrDefault();
                    return purchaseRequisitionDetail != null && (a.RequisitionDate != null && (a.RequisitionDate.Value.Year == year && a.RequisitionDate.Value.Month == month
                                                                                               && a.IsAutoGenerated == false && purchaseRequisitionDetail.Item.ItemCategory.ItemGroup.TypeId == Convert.ToInt32(grpType)));
                }).ToList();        
            }
            else
            {
                purchaseRequisitionListObj = this.purchaseRequisitionService.GetAllPurchaseRequisition().Where(a =>
                {
                    var purchaseRequisitionDetail = a.PurchaseRequisitionDetails.FirstOrDefault(); 
                    return purchaseRequisitionDetail != null && (a.RequisitionDate != null && (a.RequisitionDate.Value.Year == year && a.RequisitionDate.Value.Month == month
                                                                                                                   && a.IsAutoGenerated == false && purchaseRequisitionDetail.Item.ItemCategory.ItemGroup.TypeId != Convert.ToInt32(grpType)));
                }).ToList(); 
            }
            
            List<PurchaseRequisitionViewModel> purchaseRequisitionVMList = new List<PurchaseRequisitionViewModel>();
            foreach (var purchaseRequisition in purchaseRequisitionListObj)
            {
                PurchaseRequisitionViewModel purchaseRequisitionTemp = new PurchaseRequisitionViewModel();

                purchaseRequisitionTemp.Id = purchaseRequisition.Id;
                purchaseRequisitionTemp.RequisitionNo = purchaseRequisition.RequisitionNo;
                purchaseRequisitionTemp.Status = purchaseRequisition.Status;
                purchaseRequisitionVMList.Add(purchaseRequisitionTemp);
            }
            return Json(purchaseRequisitionVMList, JsonRequestBehavior.AllowGet);
        }
    }

    public class PurchaseRequisitionViewModel
    {
        public PurchaseRequisitionViewModel()
        {
            this.PurchaseRequisitionDetails = new List<PurchaseRequisitionDetailViewModel>();
        }
        public System.Guid Id { get; set; }
        public string RequisitionNo { get; set; }
        public string RequisitionDate { get; set; }
        public int? RequisitionBy { get; set; }
        public string RequisitionByName { get; set; }
        public Nullable<int> ApprovedBy { get; set; }
        public string ApprovedByName { get; set; }
        public string ApprovedDate { get; set; }
        public Nullable<int> ReviewedBy { get; set; }
        public string ReviewedByName { get; set; }
        public string ReviewedDate { get; set; }
        public string Remarks { get; set; }
        public bool IsAutoGenerated { get; set; }
        public bool IsLCRequired { get; set; }
        public int? Status { get; set; }        
        public virtual ICollection<PurchaseRequisitionDetailViewModel> PurchaseRequisitionDetails { get; set; }
    }

    public partial class PurchaseRequisitionDetailViewModel
    {
        public System.Guid Id { get; set; }
        public Guid PurchaseRequisitionId { get; set; }
        public Guid ItemId { get; set; }
        public string ItemName { get; set; }
        public int ItemCategoryId { get; set; }
        public double Quantity { get; set; }
        public Nullable<int> UnitId { get; set; }
        public string UnitName { get; set; }
        public string Usage { get; set; }
        public bool IsReceived { get; set; }
    }
}