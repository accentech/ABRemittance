using System;
using System.Activities.Expressions;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Configuration;
using System.Web.Mvc;
using Remit.CachingService;
using Remit.Model.Models;
using Remit.Service;
using Remit.Service.Enums;
using Remit.Service.Utilities;
using Remit.Web.Helpers;

namespace Remit.Web.Controllers
{
    public class FGSaleController : Controller
    {
        public readonly ICountryService countryService;
        public readonly IFGItemService fgItemService;
        public readonly IFGSaleService fgSaleService;
        public readonly IFGSalesDetailService fgSalesDetailService;
        public readonly IFGSalesAdjustmentService fgSalesAdjustmentService;
        public readonly IFGSalesPaymentService fgSalesPaymentService;
        public readonly IFGSalesDueAdvancedAdjustmentService fgSalesDueAdvancedAdjustmentService;

        public readonly IRoleSubModuleItemService roleSubModuleItemService;
        public readonly IFGItemInventoryService fgItemInventoryService;
        public readonly IAutoGeneratedNoService autoGeneratedNoService;
        public readonly IFGItemInventoryHistoryService fgItemInventoryHistoryService;
        public readonly IWorkflowactionSettingService workflowactionSettingService;
        public readonly IFGItemInventoryWithoutBinService fgItemInventoryWithoutBinService;
        public readonly ICommissionCalculatorService commissionCalculatorService;
        public readonly IBreakageCalculatorService breakageCalculatorService;

        private static readonly ICacheProvider cacheProvider = new DefaultCacheProvider();

        protected long timeZoneOffset = UserSession.GetTimeZoneOffset();

        string cacheKey = "permission:fgSale" + Helpers.UserSession.GetUserFromSession().RoleId;
        RoleSubModuleItem permission = null;

        string dateFormat = WebConfigurationManager.AppSettings["DateFormat"];
        string timeFormat = WebConfigurationManager.AppSettings["TimeFormat"];
        string dateTimeFormat = WebConfigurationManager.AppSettings["DateTimeFormat"];
        // GET: /FGSale/
        public ActionResult Index()
        {
            var url = Request.RawUrl;

            permission = (RoleSubModuleItem)cacheProvider.Get(cacheKey);
            if (permission == null)
                permission = roleSubModuleItemService.GetRoleSubModuleItemBySubModuleIdandRole(url, Helpers.UserSession.GetUserFromSession().RoleId);

            if (permission != null)
            {
                if (permission.ReadOperation == true)
                {
                    cacheProvider.Set(cacheKey, permission, 240);
                    return View("FGSale");
                }
                else
                {
                    return View("~/Views/Shared/NoPermission.cshtml");
                }
            }
            return View("~/Views/Shared/NoPermission.cshtml");
        }

        public FGSaleController(IFGSaleService fgSaleService, IAutoGeneratedNoService autoGeneratedNoService, IFGItemInventoryHistoryService fgItemInventoryHistoryService, IFGItemInventoryService fgItemInventoryService, IFGItemService fgItemService, ICountryService countryService, IRoleSubModuleItemService roleSubModuleItemService, IWorkflowactionSettingService workflowactionSettingService,
            IFGSalesDetailService fgSalesDetailService, IFGSalesAdjustmentService fgSalesAdjustmentService, IFGSalesPaymentService fgSalesPaymentService, IFGSalesDueAdvancedAdjustmentService fgSalesDueAdvancedAdjustmentService, IFGItemInventoryWithoutBinService fgItemInventoryWithoutBinService, ICommissionCalculatorService commissionCalculatorService, IBreakageCalculatorService breakageCalculatorService)
        {
            this.fgSaleService = fgSaleService;
            this.countryService = countryService;
            this.roleSubModuleItemService = roleSubModuleItemService;
            this.fgItemService = fgItemService;
            this.fgItemInventoryService = fgItemInventoryService;
            this.fgItemInventoryHistoryService = fgItemInventoryHistoryService;
            this.autoGeneratedNoService = autoGeneratedNoService;
            this.workflowactionSettingService = workflowactionSettingService;
            this.fgSalesAdjustmentService = fgSalesAdjustmentService;
            this.fgSalesDetailService = fgSalesDetailService;
            this.fgSalesDueAdvancedAdjustmentService = fgSalesDueAdvancedAdjustmentService;
            this.fgSalesPaymentService = fgSalesPaymentService;
            this.fgItemInventoryWithoutBinService = fgItemInventoryWithoutBinService;
            this.commissionCalculatorService = commissionCalculatorService;
            this.breakageCalculatorService = breakageCalculatorService;
        }


        public WorkflowactionSetting WorkflowactionSettingObj(int? employeeId, string url, int workFlowStatusEnum)
        {
            return this.workflowactionSettingService
                .GetAllWorkflowactionSetting().Where(app => app.EmployeeId == employeeId &&
                                                            app.SubModuleItem.UrlPath == url &&
                                                            app.WorkflowactionId == workFlowStatusEnum).FirstOrDefault();
        }


        [HttpPost]
        public JsonResult CreateFGSale(FGSale fgSale)
        {
            FGInventoryUtility fgInventoryUtility = new FGInventoryUtility(fgItemInventoryHistoryService, fgItemInventoryService, fgItemInventoryWithoutBinService);
            const string url = "/FGSale/Index";
            permission = (RoleSubModuleItem)cacheProvider.Get(cacheKey);
            if (permission == null)
                permission = roleSubModuleItemService.GetRoleSubModuleItemBySubModuleIdandRole(url, Helpers.UserSession.GetUserFromSession().RoleId);

            var isSuccess = false;
            var message = string.Empty;
            var isNew = this.fgSaleService.GetFGSale(fgSale.InvoiceNo);

            if (isNew == null)
            {
                if (permission.CreateOperation == true)
                {
                    if (fgSale.FGSalesDetails.Any())
                    {
                        int si = 1;
                        foreach (var aFgSale in fgSale.FGSalesDetails)
                        {
                            aFgSale.Id = Guid.NewGuid();
                            if (aFgSale.SalesFGUnitId != null)
                            {
                                if (aFgSale.FGItemId != null)
                                {
                                    aFgSale.SlNo = si;
                                    si++;
                                }
                            }

                            var fgItemObj = fgItemService.GetFGItem((int)aFgSale.FGItemId);
                            var fgQty = fgInventoryUtility.GetConvertedQuantity(fgItemObj, (double)aFgSale.SalesQuantity, (int)aFgSale.SalesFGUnitId);
                            if (fgQty != null)
                            {
                                aFgSale.QuantityInSFT = fgQty.QuantityInSFT;
                                aFgSale.QuantityInCTN = fgQty.QuantityInCTN;
                                aFgSale.QuantityInPCs = fgQty.QuantityInPcs;
                                aFgSale.QuantityInSMT = fgQty.QuantityInSMT;
                            }
                        }
                        

                        fgSale.TotalSFT = fgSale.FGSalesDetails.Sum(x => x.QuantityInSFT);
                        fgSale.TotalSMT = fgSale.FGSalesDetails.Sum(x => x.QuantityInSMT);
                        fgSale.TotalCTN = fgSale.FGSalesDetails.Sum(x => x.QuantityInCTN);
                        fgSale.TotalPCs = fgSale.FGSalesDetails.Sum(x => x.QuantityInPCs);
                    }
                    
                    if (fgSale.FGSalesAdjustments.Any())
                    {

                    }

                    if (fgSale.FGSalesDueAdvancedAdjustments.Any())
                    {
                        foreach (var aFgSale in fgSale.FGSalesDueAdvancedAdjustments)
                        {
                            if (aFgSale.InvoiceDate != null)
                                aFgSale.InvoiceDate = aFgSale.InvoiceDate.Value.ToUniversalTime();
                        }

                    }

                    if (fgSale.FGSalesPayments.Any())
                    {
                        foreach (var aFgSale in fgSale.FGSalesPayments)
                        {
                            if (aFgSale.PaymentDate != null)
                                aFgSale.PaymentDate = aFgSale.PaymentDate.Value.ToUniversalTime();
                            if (aFgSale.PaymentMode == 1 || aFgSale.PaymentMode == 4)
                            {
                                aFgSale.ClearAmount = aFgSale.PaymentAmount;
                            }
                            else
                            {
                                aFgSale.ClearAmount = 0.00;
                            }
                        }
                    }

                    fgSale.IsDelete = false;
                    fgSale.Status = (int)CommonEnum.Pending;
                    fgSale.CreatedBy = UserSession.GetUserFromSession().EmployeeId;
                    fgSale.CreatedOn = DateTime.UtcNow;

                    //if (fgSale.TotalPriceAfterAdjustment != null && fgSale.TotalPaidAmount != null && fgSale.TotalPriceAfterAdjustment == fgSale.TotalPaidAmount)
                    if (fgSale.Reason == 1)
                    {
                        fgSale.IsDueOrAdvanceAdjusted = fgSale.TotalDueAdvancedAmount != null && fgSale.TotalDueAdvancedAmount == 0.0000;
                    }
                    else
                    {
                        fgSale.IsDueOrAdvanceAdjusted = true;
                    }

                    if (fgSale.InvoiceDate != null) fgSale.InvoiceDate = fgSale.InvoiceDate.Value.ToUniversalTime();
                    if (fgSale.CustomerType == 1)
                    { }
                    else
                    {
                        fgSale.DealerId = Convert.ToInt32(ConfigurationManager.AppSettings["OtherDealerId"]);
                    }
                 
                    if (this.fgSaleService.CreateFGSale(fgSale, UserSession.GetUserFromSession().EmployeeId))
                    {
                        if (fgSale.FGSalesDueAdvancedAdjustments.Any())
                        {
                            foreach (var sale in fgSale.FGSalesDueAdvancedAdjustments)
                            {
                                var getFGSale = fgSaleService.GetFGSale(sale.InvoiceNo);
                                if (getFGSale != null)
                                {
                                    getFGSale.IsDueOrAdvanceAdjusted = true;
                                    try
                                    {
                                        this.fgSaleService.UpdateFGSale(getFGSale);
                                    }
                                    catch { }
                                }
                            }
                        }

                        if (fgSale.FGSalesAdjustments.Any())
                        {
                            foreach (var aFgSale in fgSale.FGSalesAdjustments)
                            {
                                if (aFgSale.CommissionCalculatorId != Guid.Empty && aFgSale.CommissionCalculatorId != null)
                                {
                                    var getCommissionCalculate =
                                        this.commissionCalculatorService.GetCommissionCalculator((Guid)aFgSale
                                            .CommissionCalculatorId);
                                    if (getCommissionCalculate != null)
                                    {
                                        getCommissionCalculate.PaidAmount = aFgSale.AdjustmentAmount;
                                        this.commissionCalculatorService.UpdateCommissionCalculator(
                                            getCommissionCalculate);
                                    }
                                }
                                if (aFgSale.BreakageCalculatorId != Guid.Empty && aFgSale.BreakageCalculatorId != null)
                                {
                                    var getBreakageCalculate =
                                        this.breakageCalculatorService.GetBreakageCalculator((Guid)aFgSale.BreakageCalculatorId);
                                    if (getBreakageCalculate != null)
                                    {
                                        getBreakageCalculate.PaidAmount = aFgSale.AdjustmentAmount;
                                        this.breakageCalculatorService.UpdateBreakageCalculator(getBreakageCalculate);
                                    }
                                }
                            }
                        }

                        if (autoGeneratedNoService.UpdateNo("SalesInvoiceNo")) { }
                        isSuccess = true;
                        message = Resources.ResourceFGSale.FGSaleSaveSuccess;
                    }
                    else
                    {
                        message = Resources.ResourceFGSale.FGSaleSaveFailed;
                    }

                }
                else
                {
                    message = Resources.ResourceCommon.MsgNoPermissionToCreate;
                }
            }
            else
            {
                if (permission.UpdateOperation == true)
                {
                    if (this.fgSaleService.UpdateFGSale(fgSale))
                    {
                        isSuccess = true;
                        message = Resources.ResourceFGSale.FGSaleUpdateSuccess;
                    }
                    else
                    {
                        message = Resources.ResourceFGSale.FGSaleUpdateFailed;
                    }
                }
                else
                {
                    message = Resources.ResourceCommon.MsgNoPermissionToUpdate;
                }
            }

            return Json(new
            {
                isSuccess = isSuccess,
                message = message,
            }, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public JsonResult UpdateFGSale(FGSale fgSale, string insertType)
        {
            FGInventoryUtility fgInventoryUtility = new FGInventoryUtility(fgItemInventoryHistoryService, fgItemInventoryService, fgItemInventoryWithoutBinService);
            const string url = "/FGSale/Index";
            permission = (RoleSubModuleItem)cacheProvider.Get(cacheKey);
            if (permission == null)
                permission = roleSubModuleItemService.GetRoleSubModuleItemBySubModuleIdandRole(url, Helpers.UserSession.GetUserFromSession().RoleId);

            var isSuccess = false;
            var message = string.Empty;

            if (permission.UpdateOperation == true)
            {
                if (insertType == "approve")
                {
                    var statusReview = (int)WorkFlowActionEnum.Approve;
                    var user = UserSession.GetUserFromSession().EmployeeId;
                    WorkflowactionSetting workflowactionSettingObj =
                        WorkflowactionSettingObj(user, url, statusReview);
                    if (workflowactionSettingObj == null)
                    {
                        message = Resources.ResourceCommon.MsgNoPermissionToApprove;
                        return Json(new { message = message, isSuccess = isSuccess }, JsonRequestBehavior.AllowGet);
                    }
                }
                if (insertType == "review")
                {
                    var statusReview = (int)WorkFlowActionEnum.Review;
                    var user = UserSession.GetUserFromSession().EmployeeId;
                    WorkflowactionSetting workflowactionSettingObj =
                        WorkflowactionSettingObj(user, url, statusReview);
                    if (workflowactionSettingObj == null)
                    {
                        message = Resources.ResourceCommon.MsgNoPermissionToReview;
                        return Json(new { message = message, isSuccess = isSuccess }, JsonRequestBehavior.AllowGet);
                    }
                }
                
                var fgSaleTemp = fgSaleService.GetFGSale(fgSale.InvoiceNo);
                if (fgSaleTemp != null)
                {
                    if (fgSaleTemp.FGSalesDetails.Any())
                    {
                        foreach (var fgsaledet in fgSaleTemp.FGSalesDetails.ToList())
                        {
                            try
                            {
                                if (this.fgSalesDetailService.DeleteFGSalesDetail(fgsaledet.Id,
                                    UserSession.GetUserFromSession().EmployeeId))
                                { }
                            }
                            catch { }
                        }
                    }

                    if (fgSaleTemp.FGSalesAdjustments.Any())
                    {
                        foreach (var fgSaleAdjust in fgSaleTemp.FGSalesAdjustments.ToList())
                        {
                            try
                            {
                                var commissionCalculatorId = fgSaleAdjust.CommissionCalculatorId;
                                var breakageCalculatorId = fgSaleAdjust.BreakageCalculatorId;
                                if (this.fgSalesAdjustmentService.DeleteFGSalesAdjustment(fgSaleAdjust.Id))
                                {
                                    if (commissionCalculatorId != Guid.Empty && commissionCalculatorId != null)
                                    {
                                        var getCommissionCalculate =
                                            this.commissionCalculatorService.GetCommissionCalculator(
                                                (Guid) commissionCalculatorId);
                                        if (getCommissionCalculate != null)
                                        {
                                            getCommissionCalculate.PaidAmount = 0.00;
                                            this.commissionCalculatorService.UpdateCommissionCalculator(
                                                getCommissionCalculate);
                                        }
                                    }
                                    if (breakageCalculatorId != Guid.Empty && breakageCalculatorId != null)
                                    {
                                        var getBreakageCalculate =
                                            this.breakageCalculatorService.GetBreakageCalculator(
                                                (Guid) breakageCalculatorId);
                                        if (getBreakageCalculate != null)
                                        {
                                            getBreakageCalculate.PaidAmount = 0.00;
                                            this.breakageCalculatorService.UpdateBreakageCalculator(
                                                getBreakageCalculate);
                                        }
                                    }
                                }
                            }
                            catch { }
                        }
                    }

                    //if (fgSaleTemp.FGSalesDueAdvancedAdjustments.Any())
                    //{
                    //    foreach (var fgSaleDueAdvancedAdjust in fgSaleTemp.FGSalesDueAdvancedAdjustments.ToList())
                    //    {
                    //        try
                    //        {
                    //            if (this.fgSalesDueAdvancedAdjustmentService.DeleteFGSalesDueAdvancedAdjustment(fgSaleDueAdvancedAdjust.Id))
                    //            { }
                    //        }
                    //        catch { }
                    //    }
                    //}

                    if (fgSaleTemp.FGSalesPayments.Any())
                    {
                        foreach (var fgSalesPayment in fgSaleTemp.FGSalesPayments.ToList())
                        {
                            try
                            {
                                if (this.fgSalesPaymentService.DeleteFGSalesPayment(fgSalesPayment.Id))
                                { }
                            }
                            catch { }
                        }
                    }
                }

                if (fgSale.FGSalesDetails.Any())
                {
                    int si = 1;
                    foreach (var aFgSale in fgSale.FGSalesDetails)
                    {
                        aFgSale.Id = Guid.NewGuid();
                        aFgSale.FGSalesInvoiceNo = fgSale.InvoiceNo;
                        if (aFgSale.SalesFGUnitId != null)
                        {
                            if (aFgSale.FGItemId != null)
                            {
                                aFgSale.SlNo = si;
                                si++;
                            }

                            var fgItemObj = fgItemService.GetFGItem((int)aFgSale.FGItemId);
                            var fgQty = fgInventoryUtility.GetConvertedQuantity(fgItemObj, (double)aFgSale.SalesQuantity, (int)aFgSale.SalesFGUnitId);
                            if (fgQty != null)
                            {
                                aFgSale.QuantityInSFT = fgQty.QuantityInSFT;
                                aFgSale.QuantityInCTN = fgQty.QuantityInCTN;
                                aFgSale.QuantityInPCs = fgQty.QuantityInPcs;
                                aFgSale.QuantityInSMT = fgQty.QuantityInSMT;
                            }
                        }
                        try
                        {
                            this.fgSalesDetailService.CreateFGSalesDetail(aFgSale,
                                UserSession.GetUserFromSession().EmployeeId);
                        }
                        catch { }

                    }

                    fgSale.TotalSFT = fgSale.FGSalesDetails.Sum(x => x.QuantityInSFT);
                    fgSale.TotalSMT = fgSale.FGSalesDetails.Sum(x => x.QuantityInSMT);
                    fgSale.TotalCTN = fgSale.FGSalesDetails.Sum(x => x.QuantityInCTN);
                    fgSale.TotalPCs = fgSale.FGSalesDetails.Sum(x => x.QuantityInPCs);
                }

                if (fgSale.FGSalesAdjustments.Any())
                {
                    foreach (var aFgSale in fgSale.FGSalesAdjustments)
                    {
                        try
                        {
                            aFgSale.FGSalesInvoiceNo = fgSale.InvoiceNo;
                            if (this.fgSalesAdjustmentService.CreateFGSalesAdjustment(aFgSale))
                            {
                                if (aFgSale.CommissionCalculatorId != Guid.Empty && aFgSale.CommissionCalculatorId != null)
                                {
                                    var getCommissionCalculate =
                                        this.commissionCalculatorService.GetCommissionCalculator((Guid)aFgSale.CommissionCalculatorId);
                                    if (getCommissionCalculate != null)
                                    {
                                        getCommissionCalculate.PaidAmount = aFgSale.AdjustmentAmount;
                                        this.commissionCalculatorService.UpdateCommissionCalculator(getCommissionCalculate);
                                    }
                                }
                                if (aFgSale.BreakageCalculatorId != Guid.Empty && aFgSale.BreakageCalculatorId != null)
                                {
                                    var getBreakageCalculate =
                                        this.breakageCalculatorService.GetBreakageCalculator((Guid)aFgSale.BreakageCalculatorId);
                                    if (getBreakageCalculate != null)
                                    {
                                        getBreakageCalculate.PaidAmount = aFgSale.AdjustmentAmount;
                                        this.breakageCalculatorService.UpdateBreakageCalculator(getBreakageCalculate);
                                    }
                                }
                            }

                            
                        }
                        catch { }
                    }
                }

                //if (fgSale.FGSalesDueAdvancedAdjustments.Any())
                //{
                //    foreach (var aFgSale in fgSale.FGSalesDueAdvancedAdjustments)
                //    {
                //        try
                //        {
                //            aFgSale.FGSalesInvoiceNo = fgSale.InvoiceNo;
                //            this.fgSalesDueAdvancedAdjustmentService.CreateFGSalesDueAdvancedAdjustment(aFgSale);
                //        }
                //        catch { }
                //    }
                //}

                if (fgSale.FGSalesPayments.Any())
                {
                    foreach (var aFgSale in fgSale.FGSalesPayments)
                    {
                        try
                        {
                            if (aFgSale.PaymentDate != null)
                                aFgSale.PaymentDate = aFgSale.PaymentDate.Value.ToUniversalTime();
                            aFgSale.FGSalesInvoiceNo = fgSale.InvoiceNo;

                            if (aFgSale.PaymentMode == 1 || aFgSale.PaymentMode == 4)
                            {
                                aFgSale.ClearAmount = aFgSale.PaymentAmount;
                            }
                            else
                            {
                                aFgSale.ClearAmount = 0.00;
                            }
                            this.fgSalesPaymentService.CreateFGSalesPayment(aFgSale);
                        }
                        catch { }
                    }
                }

                //FGSale fgSaleNew = new FGSale();
                //fgSaleTemp.InvoiceNo = fgSale.InvoiceNo;
                //fgSaleTemp.InvoiceDate = fgSale.InvoiceDate;
                if (fgSale.InvoiceDate != null) fgSaleTemp.InvoiceDate = fgSale.InvoiceDate.Value.ToUniversalTime();
                fgSaleTemp.DealerId = fgSale.CustomerType == 1 ? fgSale.DealerId : Convert.ToInt32(ConfigurationManager.AppSettings["OtherDealerId"]);
                fgSaleTemp.CustomerType = fgSale.CustomerType;
                fgSaleTemp.Name = fgSale.Name;
                fgSaleTemp.Address = fgSale.Address;
                fgSaleTemp.ContactPersonName = fgSale.ContactPersonName;
                fgSaleTemp.ContactPhone = fgSale.ContactPhone;
                fgSaleTemp.Reason = fgSale.Reason;
                fgSaleTemp.DeliverZoneId = fgSale.DeliverZoneId;
                fgSaleTemp.DefaultDeliverySite = fgSale.DefaultDeliverySite;

                fgSaleTemp.DiscountPercentage = fgSale.DiscountPercentage;
                fgSaleTemp.DiscountApprovalDocumentName = fgSale.DiscountApprovalDocumentName;
                fgSaleTemp.DiscountAmount = fgSale.DiscountAmount;

                fgSaleTemp.DeliveredBy = fgSale.DeliveredBy;
                fgSaleTemp.TotalAmount = fgSale.TotalAmount;
                fgSaleTemp.TotalDueOrAdvanceAdjustment = fgSale.TotalDueOrAdvanceAdjustment;
                fgSaleTemp.TotalAdjustment = fgSale.TotalAdjustment;
                fgSaleTemp.TotalPriceAfterAdjustment = fgSale.TotalPriceAfterAdjustment;
                fgSaleTemp.TotalPaidAmount = fgSale.TotalPaidAmount;
                fgSaleTemp.TotalDueAdvancedAmount = fgSale.TotalDueAdvancedAmount;

                fgSaleTemp.TotalSFT = fgSale.TotalSFT;
                fgSaleTemp.TotalSMT = fgSale.TotalSMT;
                fgSaleTemp.TotalCTN = fgSale.TotalCTN;
                fgSaleTemp.TotalPCs = fgSale.TotalPCs;
                fgSaleTemp.IsDelete = false;

                if (fgSale.TotalDueAdvancedAmount != null)
                {
                    if (fgSaleTemp.IsDueOrAdvanceAdjusted == null)
                    {
                        fgSaleTemp.IsDueOrAdvanceAdjusted = fgSale.TotalDueAdvancedAmount == 0.00;
                        //fgSaleTemp.IsDueOrAdvanceAdjusted = true;
                    }
                }
                else
                {
                    fgSaleTemp.IsDueOrAdvanceAdjusted = false;
                }
                if (insertType == "review")
                {
                    fgSaleTemp.ReviewedBy = UserSession.GetUserFromSession().EmployeeId;
                    fgSaleTemp.ReviewedOn = DateTime.UtcNow;
                    fgSaleTemp.Status = (int)CommonEnum.Review;
                }
                else if (insertType == "approve")
                {
                    fgSaleTemp.ReviewedBy = fgSaleTemp.ReviewedBy;
                    fgSaleTemp.ReviewedOn = fgSaleTemp.ReviewedOn;
                    fgSaleTemp.Status = (int)CommonEnum.Approved;
                    fgSaleTemp.ApprovedBy = UserSession.GetUserFromSession().EmployeeId;
                    fgSaleTemp.ApprovedOn = DateTime.UtcNow;
                }
                else
                {
                    fgSaleTemp.UpdatedBy = UserSession.GetUserFromSession().EmployeeId;
                    fgSaleTemp.UpdatedOn = DateTime.UtcNow;
                }

                if (this.fgSaleService.UpdateFGSale(fgSaleTemp))
                {
                    if (fgSale.FGSalesDueAdvancedAdjustments.Any())
                    {
                        foreach (var sale in fgSale.FGSalesDueAdvancedAdjustments)
                        {
                            var getFGSale = fgSaleService.GetFGSale(sale.InvoiceNo);
                            if (getFGSale != null)
                            {
                                getFGSale.IsDueOrAdvanceAdjusted = true;
                                try
                                {
                                    this.fgSaleService.UpdateFGSale(getFGSale);
                                }
                                catch { }
                            }
                        }
                    }

                    isSuccess = true;
                    if (insertType == "approve")
                    {
                        message = Resources.ResourceFGSale.FGSaleApproveSuccessful;
                    }
                    else if (insertType == "review")
                    {
                        message = Resources.ResourceFGSale.FGSaleReviewSuccessful;
                    }
                    else
                    {
                        message = Resources.ResourceFGSale.FGSaleUpdateSuccess;
                    }

                }
                else
                {
                    if (insertType == "approve")
                    {
                        message = Resources.ResourceFGSale.FGSaleApproveFailed;
                    }
                    else if (insertType == "review")
                    {
                        message = Resources.ResourceFGSale.FGSaleReviewFailed;
                    }
                    else
                    {
                        message = Resources.ResourceFGSale.FGSaleUpdateFailed;
                    }

                }
            }
            else
            {
                isSuccess = false;
                message = Resources.ResourceCommon.MsgNoPermissionToUpdate;
            }

            return Json(new
            {
                isSuccess = isSuccess,
                message = message,
            }, JsonRequestBehavior.AllowGet);
        }
        

        [HttpPost]
        public JsonResult DeleteFGSale(FGSale fgSale)
        {
            var isSuccess = true;
            var message = string.Empty;
            const string url = "/FGSale/Index";
            permission = (RoleSubModuleItem)cacheProvider.Get(cacheKey) ??
                         roleSubModuleItemService.GetRoleSubModuleItemBySubModuleIdandRole(url,
                             Helpers.UserSession.GetUserFromSession().RoleId);

            FGInventoryUtility fgInventoryUtility = new FGInventoryUtility(fgItemInventoryHistoryService,
                fgItemInventoryService, fgItemInventoryWithoutBinService);
            if (permission.DeleteOperation == true)
            {
                var fgSaletemp = fgSaleService.CheckFGSaleForDelete(fgSale.InvoiceNo);
                if (fgSaletemp != null)
                {
                    //return null;
                    if (fgSaletemp.FGSalesDetails != null) //save inventory history and item balance update
                    {
                        foreach (var fgSaleDet in fgSaletemp.FGSalesDetails.ToList())
                        {
                            var fgItemObj = fgItemService.GetFGItem((int)fgSaleDet.FGItemId);
                            var fgQty = fgInventoryUtility.GetConvertedQuantity(fgItemObj, (double)fgSaleDet.SalesQuantity, (int)fgSaleDet.SalesFGUnitId);
                            if (fgQty != null)
                            {
                                fgSaleDet.QuantityInSFT = fgQty.QuantityInSFT;
                                fgSaleDet.QuantityInCTN = fgQty.QuantityInCTN;
                                fgSaleDet.QuantityInPCs = fgQty.QuantityInPcs;
                                fgSaleDet.QuantityInSMT = fgQty.QuantityInSMT;
                            }
                            

                            var referenceId = fgSaleDet.Id.ToString();
                            var type = "FGSale";
                            bool isCreate = false;
                            bool isPlusBalance = true;
                            var action = actionEnum.Delete;

                            var check = fgInventoryUtility.MainFunction(fgSaleDet.FGItemId, fgSaleDet.FGGradeId,
                                fgSaleDet.Lot, null, fgSaleDet.PackQuantity, fgSaleDet.QuantityInSFT,
                                fgSaleDet.QuantityInSMT, fgSaleDet.QuantityInCTN, fgSaleDet.QuantityInPCs,
                                fgSaleDet.PackFGUnitId, referenceId, type, UserSession.GetUserFromSession().EmployeeId,
                                isPlusBalance, (int)action, isCreate, false);
                        }


                        fgSaletemp.IsDelete = true;
                        fgSaletemp.DeletedBy = UserSession.GetUserFromSession().EmployeeId;
                        fgSaletemp.DeletedOn = DateTime.UtcNow;
                        isSuccess = this.fgSaleService.UpdateFGSale(fgSaletemp);
                        if (isSuccess)
                        {
                            message = Resources.ResourceFGSale.FGSaleDeleteSuccess;
                        }
                        else
                        {
                            message = Resources.ResourceFGSale.FGSaleDeleteFailed;
                        }
                    }
                }
                else
                {
                    message = Resources.ResourceFGSale.FGSaleDeleteFailed;
                }
            }
            else
            {
                message = Resources.ResourceCommon.MsgNoPermissionToDelete;
            }
            return Json(new
            {
                isSuccess = isSuccess,
                message = message
            }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetFGSaleListByDate(DateTime date)
        {
            //var fgSaleListObj = this.fgSaleService.GetAllFGSale().Where(sa => sa.InvoiceDate != null && sa.InvoiceDate.Value.AddMinutes(timeZoneOffset).Date == date.Date && sa.IsDelete != true);

            DateTime dt1 = date.ToUniversalTime();
            DateTime dt2 = dt1.AddHours(24);
            var fgSaleListObj = this.fgSaleService.GetAllFGSale().Where(sa => sa.InvoiceDate != null && sa.InvoiceDate.Value >= dt1 && sa.InvoiceDate.Value < dt2 && sa.IsDelete != true && sa.Reason > 0);

            List<FGSaleViewModel> fgSaleVMList = new List<FGSaleViewModel>();

            foreach (var fgSale in fgSaleListObj)
            {
                FGSaleViewModel fgSaleTemp = new FGSaleViewModel();
                fgSaleTemp.InvoiceNo = fgSale.InvoiceNo;
                fgSaleTemp.InvoiceDate = fgSale.CreatedOn;
                fgSaleVMList.Add(fgSaleTemp);
            }
            return Json(fgSaleVMList.OrderByDescending(ss => ss.InvoiceDate), JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetFGSaleList()
        {
            var fgSaleListObj = this.fgSaleService.GetAllFGSale();
            List<FGSaleViewModel> fgSaleVMList = new List<FGSaleViewModel>();

            foreach (var fgSale in fgSaleListObj)
            {
                FGSaleViewModel fgSaleTemp = new FGSaleViewModel();
                fgSaleTemp.InvoiceNo = fgSale.InvoiceNo;
                fgSaleTemp.Name = fgSale.Name;

                fgSaleVMList.Add(fgSaleTemp);
            }
            return Json(fgSaleVMList, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetFGSale(string id)
        {
            const string url = "/FGSale/Index";
            var fgSale = this.fgSaleService.GetFGSale(id);

            FGSaleViewModel aFGSale = new FGSaleViewModel();

            aFGSale.InvoiceNo = fgSale.InvoiceNo;
            aFGSale.InvoiceDate = fgSale.InvoiceDate;
            if (fgSale.InvoiceDate != null)
            {
                aFGSale.InvoiceDateString = fgSale.InvoiceDate.Value.AddMinutes(timeZoneOffset).ToString(dateTimeFormat);
                aFGSale.InvoiceDateStringForFireFox = fgSale.InvoiceDate.Value.AddMinutes(timeZoneOffset).ToString("s");
            }
            aFGSale.CustomerType = fgSale.CustomerType;
            aFGSale.DeliveredBy = fgSale.DeliveredBy;

            aFGSale.DealerId = fgSale.DealerId;
            aFGSale.Name = fgSale.Name;
            aFGSale.Address = fgSale.Address;
            aFGSale.ContactPerson = fgSale.ContactPersonName;
            aFGSale.ContactPhone = fgSale.ContactPhone;
            aFGSale.Reason = fgSale.Reason;
            aFGSale.DeliverZoneId = fgSale.DeliverZoneId;
            aFGSale.DefaultDeliverySite = fgSale.DefaultDeliverySite;
            
            aFGSale.DiscountPercentage = fgSale.DiscountPercentage;
            aFGSale.DiscountAmount = fgSale.DiscountAmount;
            aFGSale.DiscountApprovalDocumentName = fgSale.DiscountApprovalDocumentName;
            if (fgSale.DiscountApprovalDocumentName != null)
            {
                aFGSale.DiscountApprovalDocumentNamePath = "/Files/Sales/" + aFGSale.InvoiceNo + "_Discount/" + fgSale.DiscountApprovalDocumentName.Replace(" ", "_");
                aFGSale.yesDoc = System.IO.File.Exists(Server.MapPath(aFGSale.DiscountApprovalDocumentNamePath));
  
            }
           
            aFGSale.TotalPack = fgSale.FGSalesDetails.Sum(a => a.PackQuantity);
            aFGSale.TotalSales = fgSale.FGSalesDetails.Sum(a => a.SalesQuantity);
            aFGSale.TotalAmount = fgSale.TotalAmount;
            aFGSale.TotalAdjustment = fgSale.TotalAdjustment;
            aFGSale.TotalDueOrAdvanceAdjustment = fgSale.TotalDueOrAdvanceAdjustment;
            aFGSale.TotalPriceAfterAdjustment = fgSale.TotalPriceAfterAdjustment;
            aFGSale.TotalPayableAfterDiscount = (fgSale.TotalPriceAfterAdjustment ?? 0) - (aFGSale.DiscountAmount ?? 0);
            aFGSale.TotalPaidAmount = fgSale.TotalPaidAmount;
            aFGSale.TotalDueAdvancedAmount = fgSale.TotalDueAdvancedAmount;

            aFGSale.Status = fgSale.Status;
            aFGSale.ApprovedBy = fgSale.ApprovedBy;
            aFGSale.ReviewedBy = fgSale.ReviewedBy;
            aFGSale.HardApprove = false;
            if (!fgSale.isDelivered)
            {
                if (fgSale.Status == (int) CommonEnum.Approved)
                {
                    var statusReview = (int)WorkFlowActionEnum.HardApprove;
                    var user = UserSession.GetUserFromSession().EmployeeId;
                    WorkflowactionSetting workflowactionSettingObj =
                        WorkflowactionSettingObj(user, url, statusReview);
                    aFGSale.HardApprove = workflowactionSettingObj != null;
                }
            }

            //fgSale.
            List<FGSalesDetailViewModel> fgSalesDetailList = new List<FGSalesDetailViewModel>();
            if (fgSale.FGSalesDetails != null)
            {
                foreach (var aFGSaleDetail in fgSale.FGSalesDetails)
                {
                    FGSalesDetailViewModel fgSalesDetail = new FGSalesDetailViewModel();
                    fgSalesDetail.Id = aFGSaleDetail.Id;
                    fgSalesDetail.SlNo = aFGSaleDetail.SlNo;
                    fgSalesDetail.FGItemId = aFGSaleDetail.FGItemId;
                    if (aFGSaleDetail.FGItem != null)
                    {
                        fgSalesDetail.TypeId = aFGSaleDetail.FGItem.TypeId;
                        fgSalesDetail.PackageToSalesRatio = aFGSaleDetail.FGItem.PackageToSalesRatio;
                        fgSalesDetail.SftPerPiece = aFGSaleDetail.FGItem.SftPerPiece;
                        fgSalesDetail.SmtPerPiece = aFGSaleDetail.FGItem.SmtPerPiece;
                        fgSalesDetail.PcsPerCartoon = aFGSaleDetail.FGItem.PcsPerCartoon;
                    }

                    fgSalesDetail.FGGradeId = aFGSaleDetail.FGGradeId;
                    fgSalesDetail.FGSizeId = aFGSaleDetail.FGSizeId;
                    if (aFGSaleDetail.FGSize != null)
                        fgSalesDetail.FGSize = aFGSaleDetail.FGSize.Size;

                    fgSalesDetail.Lot = aFGSaleDetail.Lot;
                    fgSalesDetail.PackFGUnitId = aFGSaleDetail.PackFGUnitId;
                    if (aFGSaleDetail.FGUOM != null)
                        fgSalesDetail.PackUnit = aFGSaleDetail.FGUOM.UnitName;
                    if (aFGSaleDetail.FGUOM1 != null)
                        fgSalesDetail.SalesUnit = aFGSaleDetail.FGUOM1.UnitName;
                    fgSalesDetail.PackQuantity = aFGSaleDetail.PackQuantity;
                    fgSalesDetail.SalesFGUnitId = aFGSaleDetail.SalesFGUnitId;
                    fgSalesDetail.SalesQuantity = aFGSaleDetail.SalesQuantity;

                    fgSalesDetail.UnitPrice = aFGSaleDetail.UnitPrice;
                    fgSalesDetail.DiscountPerUnit = aFGSaleDetail.DiscountPerUnit;
                    fgSalesDetail.UnitRateAfterDiscount = aFGSaleDetail.UnitRateAfterDiscount;
                    fgSalesDetail.Amount = aFGSaleDetail.Amount;

                    fgSalesDetail.QuantityInSFT = aFGSaleDetail.QuantityInSFT;
                    fgSalesDetail.QuantityInCTN = aFGSaleDetail.QuantityInCTN;
                    fgSalesDetail.QuantityInPCs = aFGSaleDetail.QuantityInPCs;
                    fgSalesDetail.QuantityInSMT = aFGSaleDetail.QuantityInSMT;

                    fgSalesDetailList.Add(fgSalesDetail);

                }
                aFGSale.FGSalesDetailsList = fgSalesDetailList.OrderBy(ss => ss.SlNo).ToList();
            }

            List<FGSalesAdjustmentViewModel> fgSaleAdjustmentList = new List<FGSalesAdjustmentViewModel>();
            if (fgSale.FGSalesAdjustments != null)
            {
                foreach (var aFGSaleAdjustment in fgSale.FGSalesAdjustments)
                {
                    FGSalesAdjustmentViewModel fgSalesAdjustment = new FGSalesAdjustmentViewModel();
                    fgSalesAdjustment.Id = aFGSaleAdjustment.Id;
                    fgSalesAdjustment.FGSalesInvoiceNo = aFGSaleAdjustment.FGSalesInvoiceNo;
                    fgSalesAdjustment.FGAdjustmentSetupId = aFGSaleAdjustment.FGAdjustmentSetupId;
                    fgSalesAdjustment.Note = aFGSaleAdjustment.Note;
                    fgSalesAdjustment.Percentage = aFGSaleAdjustment.Percentage;
                    fgSalesAdjustment.CalculationOn = aFGSaleAdjustment.FGAdjustmentSetup.CalculationOn;
                    fgSalesAdjustment.UOM = aFGSaleAdjustment.FGAdjustmentSetup.UOM;
                    fgSalesAdjustment.ApplyMode = aFGSaleAdjustment.FGAdjustmentSetup.ApplyMode;
                    if (aFGSaleAdjustment.FGAdjustmentSetup.DefaultValue != null){
                        fgSalesAdjustment.DefaultValue = (int)aFGSaleAdjustment.FGAdjustmentSetup.DefaultValue;
                    }else{
                        fgSalesAdjustment.DefaultValue = 0;
                    }

                    fgSalesAdjustment.breakageCalculator = true;
                    fgSalesAdjustment.commissionCalculator = true;

                    if (aFGSaleAdjustment.FGAdjustmentSetup.UOM != null)
                        fgSalesAdjustment.UOM = (int)aFGSaleAdjustment.FGAdjustmentSetup.UOM;
                    if (aFGSaleAdjustment.FGAdjustmentSetup != null)
                    {
                        fgSalesAdjustment.percentageDisable = aFGSaleAdjustment.FGAdjustmentSetup.ApplyMode == "Input";
                    }
                    if (aFGSaleAdjustment.CommissionCalculator != null)
                    {
                        var list = this.commissionCalculatorService.GetAllCommissionCalculator()
                            .Where(cc => cc.DealerId == aFGSale.DealerId && cc.PeriodType == aFGSaleAdjustment.CommissionCalculator.PeriodType && cc.PaidAmount != cc.Total).ToList();

                        List<CustomCommissionCalculatorViewModel> customList = new List<CustomCommissionCalculatorViewModel>();
                        if (list.Any())
                        {
                            foreach (var aData in list)
                            {
                                CustomCommissionCalculatorViewModel aValue =
                                    new CustomCommissionCalculatorViewModel
                                    {
                                        Id = aData.Id,
                                        Total = aData.Total,
                                        showValueName = aData.Year + "_" + aData.FGGrade.Grade + "_" + aData.PeriodName
                                    };
                                customList.Add(aValue);
                            }
                        }

                        fgSalesAdjustment.CommissionCalculatorId = aFGSaleAdjustment.CommissionCalculatorId;
                        CustomCommissionCalculatorViewModel aValue2 =
                            new CustomCommissionCalculatorViewModel
                            {
                                Id = aFGSaleAdjustment.CommissionCalculator.Id,
                                Total = aFGSaleAdjustment.CommissionCalculator.Total,
                                showValueName = aFGSaleAdjustment.CommissionCalculator.Year + "_" + aFGSaleAdjustment.CommissionCalculator.FGGrade.Grade + "_" + aFGSaleAdjustment.CommissionCalculator.PeriodName
                            };
                        customList.Add(aValue2);

                        fgSalesAdjustment.AdjustmentAmountDisable = true;
                        fgSalesAdjustment.commissionCalculator = false;
                        fgSalesAdjustment.percentageDisable = true;
                        fgSalesAdjustment.breakageCalculator = true;
                        fgSalesAdjustment.commissionPeriods = customList;
                    }
                    if (aFGSaleAdjustment.BreakageCalculator != null)
                    {
                        var list = this.breakageCalculatorService.GetAllBreakageCalculator()
                            .Where(cc => cc.DealerId == aFGSale.DealerId && cc.PeriodType == aFGSaleAdjustment.BreakageCalculator.PeriodType && cc.PaidAmount != cc.BreakageAmount).ToList();

                        List<CustomBreakageCalculatorViewModel> customList = new List<CustomBreakageCalculatorViewModel>();
                        if (list.Any())
                        {
                            foreach (var aData in list)
                            {
                                CustomBreakageCalculatorViewModel aValue =
                                    new CustomBreakageCalculatorViewModel
                                    {
                                        Id = aData.Id,
                                        InvoiceAmount = aData.InvoiceAmount,
                                        BreakageAmount = aData.BreakageAmount,
                                        showValueName = aData.Year + "_" + aData.PeriodName
                                    };
                                customList.Add(aValue);
                            }
                        }

                        fgSalesAdjustment.BreakageCalculatorId = aFGSaleAdjustment.BreakageCalculatorId;
                        CustomBreakageCalculatorViewModel aValue2 =
                            new CustomBreakageCalculatorViewModel
                            {
                                Id = aFGSaleAdjustment.BreakageCalculator.Id,
                                InvoiceAmount = aFGSaleAdjustment.BreakageCalculator.InvoiceAmount,
                                BreakageAmount = aFGSaleAdjustment.BreakageCalculator.BreakageAmount,
                                showValueName = aFGSaleAdjustment.BreakageCalculator.Year + "_" + aFGSaleAdjustment.BreakageCalculator.PeriodName
                                //Id = aFGSaleAdjustment.CommissionCalculator.Id,
                                //Total = aFGSaleAdjustment.CommissionCalculator.Total,
                                //showValueName = aFGSaleAdjustment.CommissionCalculator.Year + "_" + aFGSaleAdjustment.CommissionCalculator.FGGrade.Grade + "_" + aFGSaleAdjustment.CommissionCalculator.PeriodName
                            };
                        customList.Add(aValue2);

                        fgSalesAdjustment.AdjustmentAmountDisable = true;
                        fgSalesAdjustment.commissionCalculator = true;
                        fgSalesAdjustment.breakageCalculator = false;
                        fgSalesAdjustment.percentageDisable = true;

                        fgSalesAdjustment.breakagePeriods = customList;
                    }

                    fgSalesAdjustment.AdjustmentAmount = aFGSaleAdjustment.AdjustmentAmount;
                    fgSaleAdjustmentList.Add(fgSalesAdjustment);

                }
                aFGSale.FGSalesAdjustmentList = fgSaleAdjustmentList;
            }

            List<FGSalesDueAdvancedAdjustmentViewModel> fgSalesDueAdvancedAdjustmentsList = new List<FGSalesDueAdvancedAdjustmentViewModel>();
            if (fgSale.FGSalesDueAdvancedAdjustments != null)
            {
                foreach (var aFgSaleFgSalesDueAdvancedAdjustment in fgSale.FGSalesDueAdvancedAdjustments)
                {
                    FGSalesDueAdvancedAdjustmentViewModel fgSalesAdjustmentDueAdvanced = new FGSalesDueAdvancedAdjustmentViewModel();
                    fgSalesAdjustmentDueAdvanced.Id = aFgSaleFgSalesDueAdvancedAdjustment.Id;
                    fgSalesAdjustmentDueAdvanced.FGSalesInvoiceNo = aFgSaleFgSalesDueAdvancedAdjustment.FGSalesInvoiceNo;
                    fgSalesAdjustmentDueAdvanced.InvoiceNo = aFgSaleFgSalesDueAdvancedAdjustment.InvoiceNo;
                    fgSalesAdjustmentDueAdvanced.InvoiceDate = aFgSaleFgSalesDueAdvancedAdjustment.InvoiceDate;
                    if (fgSalesAdjustmentDueAdvanced.InvoiceDate != null)
                    {
                        fgSalesAdjustmentDueAdvanced.InvoiceDateString = fgSalesAdjustmentDueAdvanced.InvoiceDate.Value.AddMinutes(timeZoneOffset).ToString(dateTimeFormat);
                        fgSalesAdjustmentDueAdvanced.InvoiceDateStringForFireFox = fgSalesAdjustmentDueAdvanced.InvoiceDate.Value.AddMinutes(timeZoneOffset).ToString("s");
                    }
                    fgSalesAdjustmentDueAdvanced.DueAdvancedAmount = aFgSaleFgSalesDueAdvancedAdjustment.DueAdvancedAmount;
                    fgSalesDueAdvancedAdjustmentsList.Add(fgSalesAdjustmentDueAdvanced);

                }
                aFGSale.FGSalesDueAdvancedAdjustmentList = fgSalesDueAdvancedAdjustmentsList;
            }


            List<FGSalesPaymentViewModel> fgSalesPaymentList = new List<FGSalesPaymentViewModel>();
            if (fgSale.FGSalesPayments != null)
            {
                foreach (var aFgSalesPayment in fgSale.FGSalesPayments)
                {
                    FGSalesPaymentViewModel fgSalesPayment = new FGSalesPaymentViewModel();
                    fgSalesPayment.Id = aFgSalesPayment.Id;
                    fgSalesPayment.FGSalesInvoiceNo = aFgSalesPayment.FGSalesInvoiceNo;
                    fgSalesPayment.PaymentMode = aFgSalesPayment.PaymentMode;
                    fgSalesPayment.BankId = aFgSalesPayment.BankId;

                    if (aFgSalesPayment.Bank != null)
                    {
                        List<BankAccount> bankAccountList = new List<BankAccount>();
                        foreach (var bnkAcnt in aFgSalesPayment.Bank.BankAccounts)
                        {
                            BankAccount bankAccount = new BankAccount();
                            bankAccount.Id = bnkAcnt.Id;
                            bankAccount.AccountName = bnkAcnt.AccountName;
                            bankAccountList.Add(bankAccount);
                        }
                        fgSalesPayment.BankAccountList = bankAccountList;
                    }

                    fgSalesPayment.BankAccountId = aFgSalesPayment.BankAccountId;
                    fgSalesPayment.PaymentDate = aFgSalesPayment.PaymentDate;//.Value.ToString(dateTimeFormat);
                    if (aFgSalesPayment.PaymentDate != null)
                    {
                        fgSalesPayment.PaymentDateString = aFgSalesPayment.PaymentDate.Value.AddMinutes(timeZoneOffset).ToString(dateTimeFormat);
                        fgSalesPayment.PaymentDateStringForFireFox = aFgSalesPayment.PaymentDate.Value.AddMinutes(timeZoneOffset).ToString("s");
                    }
                    fgSalesPayment.PaymentAmount = aFgSalesPayment.PaymentAmount;
                    fgSalesPayment.ChequeNo = aFgSalesPayment.ChequeNo;
                    fgSalesPaymentList.Add(fgSalesPayment);

                }
                aFGSale.FGSalesPaymentList = fgSalesPaymentList;
            }

            return Json(aFGSale, JsonRequestBehavior.AllowGet);
        }
        
        public void UpoladFile(HttpPostedFileBase file, string invoiceNo)
        {
            if (file != null)
            {
                var mainFolder = Server.MapPath("~/Files");
                if (!Directory.Exists(mainFolder))
                {
                    Directory.CreateDirectory(mainFolder);
                }


                var folder = Server.MapPath("~/Files/Sales");
                if (!Directory.Exists(folder))
                {
                    Directory.CreateDirectory(folder);
                }

                invoiceNo = invoiceNo.Replace("/", "_");

                var subFolder = Server.MapPath("~/Files/Sales/" + invoiceNo + "_Discount");
                if (!Directory.Exists(subFolder))
                {
                    Directory.CreateDirectory(subFolder);
                }


                string str = file.FileName;
                string ext = str.Substring(0, str.LastIndexOf(".") + 1).TrimEnd('.');
                if (ext != String.Empty)
                {
                    ext = ext.Replace(" ", "_");
                }



                if (System.IO.File.Exists(Server.MapPath("~/Files/Sales/" + invoiceNo + "_Discount/" + ext + Path.GetExtension(file.FileName))))
                {
                    System.IO.File.Delete(Server.MapPath("~/Files/Sales/" + invoiceNo + "_Discount/" + ext +
                                                         Path.GetExtension(file.FileName)));
                }

                var saveToFileLoc = Server.MapPath("~/Files/Sales/" + invoiceNo + "_Discount/" + ext +
                                                   Path.GetExtension(file.FileName));
                try
                {
                    file.SaveAs(saveToFileLoc);
                }
                catch (Exception e)
                {
                    Console.WriteLine("File Save Error: " + e);
                }
            }


        }

    }

    public class FGSaleViewModel
    {
        public FGSaleViewModel()
        {
            this.FGSalesDetailsList = new List<FGSalesDetailViewModel>();
            this.FGSalesAdjustmentList = new List<FGSalesAdjustmentViewModel>();
            this.FGSalesDueAdvancedAdjustmentList = new List<FGSalesDueAdvancedAdjustmentViewModel>();
            this.FGSalesPaymentList = new List<FGSalesPaymentViewModel>();
        }

        public string InvoiceNo { get; set; }
        public Nullable<System.DateTime> InvoiceDate { get; set; }
        public string InvoiceDateString { get; set; }
        public string InvoiceDateStringForFireFox { get; set; }
        public Nullable<int> DealerId { get; set; }
        public Nullable<int> Reason { get; set; }
        public Nullable<int> DeliveredBy { get; set; }
        public Nullable<int> CustomerType { get; set; }
        public Nullable<int> Status { get; set; }
        public Nullable<int> ApprovedBy { get; set; }
        public Nullable<int> ReviewedBy { get; set; }

        public string Name { get; set; }
        public bool HardApprove { set; get; }
        public string ContactPerson { get; set; }
        public string ContactPhone { get; set; }
        public string Address { get; set; }
        public string DefaultDeliverySite { get; set; }
        public Nullable<double> DueAdvancedAmount { get; set; }
        public Nullable<int> DeliverZoneId { get; set; }
        public Nullable<double> TotalPack { get; set; }
        public Nullable<double> TotalSales { get; set; }
        public Nullable<double> TotalAmount { get; set; }
        public Nullable<double> TotalDueOrAdvanceAdjustment { get; set; }
        public Nullable<double> TotalAdjustment { get; set; }
        public Nullable<double> TotalPriceAfterAdjustment { get; set; }
        public Nullable<double> TotalDueAdvancedAmount { get; set; }
        public Nullable<double> TotalPaidAmount { get; set; }
        public Nullable<double> TotalPayableAfterDiscount { get; set; }
        public Nullable<double> TotalSFT { get; set; }
        public Nullable<double> TotalSMT { get; set; }
        public Nullable<double> TotalCTN { get; set; }
        public Nullable<double> TotalPCs { get; set; }
        public Nullable<int> AuthorizeById { get; set; }
        public Nullable<System.DateTime> AuthorizeDate { get; set; }
        public string AuthorizationDocumentPath { get; set; }
        public Nullable<double> DiscountAmount { get; set; }
        public Nullable<double> DiscountPercentage { get; set; }
        public Nullable<int> DiscountApprovedBy { get; set; }
        public Nullable<System.DateTime> DiscountApprovedOn { get; set; }
        public string DiscountApprovalDocumentPath { get; set; }
        public string DiscountApprovalDocumentName { get; set; }
        public Nullable<bool> IsDueOrAdvanceAdjusted { get; set; }
        public string DiscountApprovalDocumentNamePath { set; get; }
        public bool yesDoc { set; get; }

        public List<FGSalesDetailViewModel> FGSalesDetailsList { get; set; }
        public List<FGSalesAdjustmentViewModel> FGSalesAdjustmentList { get; set; }
        public List<FGSalesDueAdvancedAdjustmentViewModel> FGSalesDueAdvancedAdjustmentList { get; set; }
        public List<FGSalesPaymentViewModel> FGSalesPaymentList { get; set; }

    }
    public class FGSalesDetailViewModel
    {
        public System.Guid Id { get; set; }
        public Nullable<int> SlNo { get; set; }
        public string FGSalesInvoiceNo { get; set; }
        public Nullable<int> FGItemId { get; set; }
        public Nullable<double> PackageToSalesRatio { get; set; }
        public int TypeId { get; set; }
        public Nullable<int> FGSizeId { get; set; }
        public Nullable<int> FGGradeId { get; set; }
        public string Lot { get; set; }
        public string PackUnit { get; set; }
        public string SalesUnit { get; set; }
        public string FGSize { set; get; }
        public Nullable<double> PackQuantity { get; set; }
        public Nullable<int> PackFGUnitId { get; set; }
        public Nullable<double> SalesQuantity { get; set; }
        public Nullable<int> SalesFGUnitId { get; set; }
        public Nullable<double> UnitPrice { get; set; }
        public Nullable<double> DiscountPerUnit { get; set; }
        public Nullable<double> UnitRateAfterDiscount { get; set; }
        public Nullable<double> Amount { get; set; }
        public Nullable<double> SftPerPiece { get; set; }
        public Nullable<double> SmtPerPiece { get; set; }
        public Nullable<int> PcsPerCartoon { get; set; }

        public Nullable<double> QuantityInSFT { get; set; }
        public Nullable<double> QuantityInSMT { get; set; }
        public Nullable<double> QuantityInCTN { get; set; }
        public Nullable<int> QuantityInPCs { get; set; }

    }
    public class FGSalesAdjustmentViewModel
    {
        public FGSalesAdjustmentViewModel()
        {
            this.commissionPeriods = new List<CustomCommissionCalculatorViewModel>();
            this.breakagePeriods = new List<CustomBreakageCalculatorViewModel>();
        }
        public int Id { get; set; }
        public string FGSalesInvoiceNo { get; set; }
        public Nullable<int> FGAdjustmentSetupId { get; set; }
        public string Note { get; set; }
        public string ApplyMode { get; set; }
        public string CalculationOn { get; set; }
        public Guid? CommissionCalculatorId { get; set; }
        public Guid? BreakageCalculatorId { get; set; }
        public int? DefaultValue { set; get; }
        public int? UOM { set; get; }
        public Nullable<double> Percentage { get; set; }
        public Nullable<double> AdjustmentAmount { get; set; }
        public bool percentageDisable { set; get; }
        public bool AdjustmentAmountDisable { set; get; }
        public bool commissionCalculator { set; get; }
        public bool breakageCalculator { set; get; }
        public List<CustomCommissionCalculatorViewModel> commissionPeriods { get; set; }
        public List<CustomBreakageCalculatorViewModel> breakagePeriods { get; set; }
    }
    public class FGSalesDueAdvancedAdjustmentViewModel
    {
        public int Id { get; set; }
        public string FGSalesInvoiceNo { get; set; }
        public string InvoiceNo { get; set; }
        public Nullable<System.DateTime> InvoiceDate { get; set; }
        public Nullable<double> DueAdvancedAmount { get; set; }
        public string InvoiceDateString { get; set; }
        public string InvoiceDateStringForFireFox { set; get; }

    }
    public class FGSalesPaymentViewModel
    {
        public FGSalesPaymentViewModel()
        {
            this.BankAccountList = new List<BankAccount>();
        }
        public int Id { get; set; }
        public string FGSalesInvoiceNo { get; set; }
        public Nullable<int> PaymentMode { get; set; }
        public Nullable<int> BankId { get; set; }
        public Nullable<int> BankAccountId { get; set; }
        public string ChequeNo { get; set; }
        public Nullable<System.DateTime> PaymentDate { get; set; }
        public string PaymentDateStringForFireFox { get; set; }
        public string PaymentDateString { get; set; }
        public Nullable<double> PaymentAmount { get; set; }
        public List<BankAccount> BankAccountList { set; get; }

    }

}