using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Remit.CachingService;
using Remit.Model.Models;
using Remit.Service;
using Helpers;
using Remit.Web.Helpers;
using Remit.Service.Enums;
using System.Linq.Dynamic;
using Remit.Web.Models;
using System.Text.RegularExpressions;
using System.Web.Configuration;

namespace Remit.Web.Controllers
{
    public class ItemIssueController : Controller
    {
        public readonly IItemIssueService itemIssueService;
        public readonly IItemService itemService;
        public readonly IItemInventoryService itemInventoryService;
        public readonly IItemIssueDetailService itemIssueDetailService;
        public readonly ISubModuleItemService subModuleItemService;
        public readonly IRoleSubModuleItemService roleSubModuleItemService;
        public readonly IWorkflowactionSettingService workflowactionSettingService;
        public readonly INotificationSettingService notificationSettingService;
        public readonly IItemDemandDetailService itemDemandDetailService;
        public readonly IItemDemandService itemDemandService;
        public readonly IAutoGeneratedNoService autoGeneratedNoService;
        private static readonly ICacheProvider cacheProvider = new DefaultCacheProvider();

        protected long timeZoneOffset = UserSession.GetTimeZoneOffset();

        public ItemIssueController(IItemIssueService itemIssueService,
            IWorkflowactionSettingService workflowactionSettingService,
            INotificationSettingService notificationSettingService, IItemDemandService itemDemandService,
            ISubModuleItemService subModuleItemService, IItemService itemService,
            IRoleSubModuleItemService roleSubModuleItemService, IItemDemandDetailService itemDemandDetailService,
            IItemIssueDetailService itemIssueDetailService,
            IAutoGeneratedNoService autoGeneratedNoService,
            IItemInventoryService itemInventoryService)
        {
            this.itemIssueService = itemIssueService;
            this.subModuleItemService = subModuleItemService;
            this.roleSubModuleItemService = roleSubModuleItemService;
            this.itemIssueDetailService = itemIssueDetailService;
            this.workflowactionSettingService = workflowactionSettingService;
            this.notificationSettingService = notificationSettingService;
            this.autoGeneratedNoService = autoGeneratedNoService;
            this.itemService = itemService;
            this.itemInventoryService = itemInventoryService;
            this.itemDemandDetailService = itemDemandDetailService;
            this.itemDemandService = itemDemandService;
        }

        string dateTimeFormat = WebConfigurationManager.AppSettings["DateTimeFormat"];
        string cacheKeyIssue = "permission:itemIssue" + Helpers.UserSession.GetUserFromSession().RoleId;
        RoleSubModuleItem permissionIssue = null;

        //const string urlIssue = "/ItemIssue/Index";

        // GET: /ItemIssue/
        public ActionResult Index()
        {
            const string urlIssue = "/ItemIssue/Index";
            ViewBag.GroupType = WebConfigurationManager.AppSettings["GroupType"];
            Session["GroupT"] = "raw";
            cacheKeyIssue += WebConfigurationManager.AppSettings["GroupType"];
            return CommonItemIssueList(urlIssue, cacheKeyIssue, "ItemIssue");
        }
        public ActionResult SparePartsAndOtherIndex()
        {
            ViewBag.GroupType = "";
            Session["GroupT"] = "spare";
            const string urlIssue = "/ItemIssue/SparePartsAndOtherIndex";
            return CommonItemIssueList(urlIssue, cacheKeyIssue, "ItemIssue");
        }


        public ActionResult IndexPending()
        {
            const string urlIssue = "/ItemIssue/Index";
            ViewBag.IndexPending = 1;
            return CommonItemIssueList(urlIssue, cacheKeyIssue, "ItemIssue");
        }

        private ActionResult CommonItemIssueList(string url, string cacheKey, string viewName)
        {
            RoleSubModuleItem permissionItemIssue = (RoleSubModuleItem)cacheProvider.Get(cacheKey) ??
                                                    roleSubModuleItemService.GetRoleSubModuleItemBySubModuleIdandRole(
                                                        url, Helpers.UserSession.GetUserFromSession().RoleId);
            if (permissionItemIssue != null)
            {
                if (permissionItemIssue.ReadOperation == true)
                {
                    cacheProvider.Set(cacheKey, permissionItemIssue, 240);
                    return View(viewName);
                }
                else
                {
                    return View("~/Views/Shared/NoPermission.cshtml");
                }
            }
            return View("~/Views/Shared/NoPermission.cshtml");
        }


        public ActionResult EditItemIssue(string id, string redirectPage, int status) //edit fields
        {
            ViewBag.ItemIssueId = id;
            ViewBag.Status = status;
            ViewBag.ForEditOrApproveOrIssueOrReceive = 77; //for edit
            ViewBag.RedirectPage = redirectPage;
            return View("ItemIssue");
        }


        [HttpPost]
        public JsonResult CreateItemIssue(ItemIssue itemIssue, List<ItemDemandDetailViewModel> demandDetList)
        {
            var isSuccess = false;
            var message = string.Empty;
            var isNew = itemIssue.Id == Guid.Empty ? true : false;

            string urlIssue = string.Empty;
            if ((string)Session["GroupT"] == "raw")
            {
                urlIssue = "/ItemIssue/Index";
                cacheKeyIssue += WebConfigurationManager.AppSettings["GroupType"];
            }
            else
            {
                urlIssue = "/ItemIssue/SparePartsAndOtherIndex";
            }

            permissionIssue = (RoleSubModuleItem)cacheProvider.Get(cacheKeyIssue) ??
                               roleSubModuleItemService.GetRoleSubModuleItemBySubModuleIdandRole(urlIssue, Helpers.UserSession.GetUserFromSession().RoleId);

            if (isNew)
            {
                if (permissionIssue.CreateOperation == true)
                {
                    var isIssReq = false;
                    itemIssue.Id = Guid.NewGuid();
                    itemIssue.Date = itemIssue.Date != null ? itemIssue.Date.Value.ToUniversalTime() : DateTime.UtcNow;

                    List<ItemIssueDetail> issueDetails = new List<ItemIssueDetail>();
                    foreach (var itemIssueDet in demandDetList)
                    {
                        foreach (var inv in itemIssueDet.ItemInventoryViewModels)
                        {
                            ItemIssueDetail issueDetail = new ItemIssueDetail();
                            issueDetail.Id = Guid.NewGuid();
                            if (itemIssueDet.ItemId != null) issueDetail.ItemId = (Guid)itemIssueDet.ItemId;
                            issueDetail.ItemIssueId = itemIssue.Id;
                            issueDetail.UnitId = itemIssueDet.UnitId;
                            issueDetail.BinCardId = inv.BinCardId;
                            issueDetail.Quantity = inv.QuantityIssued;

                            issueDetails.Add(issueDetail);
                        }

                        if (!isIssReq)
                        {
                            if (itemIssueDet.ItemId != null)
                            {
                                var chkReq = itemService.GetItem((Guid)itemIssueDet.ItemId);
                                if (chkReq != null)
                                {
                                    if (chkReq.IsApprovalRequiredForIssue == true)
                                    {
                                        isIssReq = true;
                                    }
                                }
                            }
                        }
                    }

                    itemIssue.ItemIssueDetails = issueDetails;
                    if (isIssReq)
                    {
                        itemIssue.Status = (int)CommonEnum.Pending;
                        itemIssue.IsApprovalRequired = true;
                    }
                    else
                    {
                        itemIssue.Status = (int)CommonEnum.Approved;
                        itemIssue.AuthorisedBy = UserSession.GetUserFromSession().EmployeeId;
                        itemIssue.AuthorisedDate = DateTime.UtcNow;
                        itemIssue.IsApprovalRequired = false;
                    }

                    if (this.itemIssueService.CreateItemIssue(itemIssue, UserSession.GetUserFromSession().EmployeeId))
                    {
                        if (itemIssue.ItemDemandId != null && itemIssue.ItemDemandId != Guid.Empty)
                        {
                            var getDemById = this.itemDemandService.GetItemDemand((Guid)itemIssue.ItemDemandId);
                            if (getDemById != null)
                            {
                                getDemById.IsIssued = true;
                                try
                                {
                                    this.itemDemandService.UpdateItemDemand(getDemById);
                                }
                                catch { }
                            }
                        }

                        if (autoGeneratedNoService.UpdateNo("Issue")) { }
                        isSuccess = true;
                        message += string.Format(Resources.ResourceCommon.CMsg_save,
                            Resources.ResourceItemIssue.LblItemIssue);
                    }
                    else
                    {
                        message = string.Format(Resources.ResourceCommon.CMsg_unsave,
                            Resources.ResourceItemIssue.LblItemIssue);
                    }

                }
                else
                {
                    message = Resources.ResourceCommon.MsgNoPermissionToCreate;
                }
            }
            else
            {
                if (permissionIssue.UpdateOperation == true)
                {
                    if (this.itemIssueService.UpdateItemIssueWhenApprove(itemIssue))
                    {
                        isSuccess = true;
                        message = string.Format(Resources.ResourceCommon.CMsg_update,
                            Resources.ResourceItemIssue.LblItemIssue); ;
                    }
                    else
                    {
                        message = string.Format(Resources.ResourceCommon.CMsg_notupdate,
                            Resources.ResourceItemIssue.LblItemIssue);
                    }
                }
                else
                {
                    message = Resources.ResourceCommon.MsgNoPermissionToUpdate;
                }
            }

            return Json(new
            {
                isSuccess = isSuccess,
                message = message,
            }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult DeleteItemIssue(ItemIssue itemIssue)
        {
            var isSuccess = true;
            var message = string.Empty;

            string urlIssue = string.Empty;
            if ((string)Session["GroupT"] == "raw")
            {
                urlIssue = "/ItemIssue/Index";
                cacheKeyIssue += WebConfigurationManager.AppSettings["GroupType"];
            }
            else
            {
                urlIssue = "/ItemIssue/SparePartsAndOtherIndex";
            }

            permissionIssue = (RoleSubModuleItem)cacheProvider.Get(cacheKeyIssue) ?? roleSubModuleItemService.GetRoleSubModuleItemBySubModuleIdandRole(urlIssue,
                                Helpers.UserSession.GetUserFromSession().RoleId);

            if (permissionIssue.DeleteOperation == true)
            {
                isSuccess = this.itemIssueService.DeleteItemIssue(itemIssue.Id, UserSession.GetUserFromSession().EmployeeId);
                if (isSuccess)
                {
                    message = string.Format(Resources.ResourceCommon.CMsg_delete,
                        Resources.ResourceItemIssue.LblItemIssue);
                }
                else
                {
                    message = string.Format(Resources.ResourceCommon.CMsg_notdelete,
                        Resources.ResourceItemIssue.LblItemIssue);
                }
            }
            else
            {
                message = Resources.ResourceCommon.MsgNoPermissionToDelete;
            }

            return Json(new
            {
                isSuccess = isSuccess,
                message = message
            }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetItemIssueList()
        {
            var itemIssueListObj = this.itemIssueService.GetAllItemIssue().Where(a => a.IsDeleted != true).OrderByDescending(iss => iss.Date);
            List<ItemIssueViewModel> itemIssueVMList = new List<ItemIssueViewModel>();

            int countIndex = 0;
            foreach (var itemIssue in itemIssueListObj)
            {
                ItemIssueViewModel itemIssueTemp = GetItemIssueCommon(itemIssue);

                if (countIndex == 0 && itemIssue.Date != null)
                {
                    countIndex++;
                }
                else
                {
                }

                itemIssueVMList.Add(itemIssueTemp);
            }
            return Json(itemIssueVMList, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetItemIssueListByStatus(int status)
        {
            List<ItemIssueViewModel> itemIssueVMList = new List<ItemIssueViewModel>();
            var itemIssueListObj = this.itemIssueService.GetAllItemIssue();//.Where(ii => ii.Status == status);
            if (itemIssueListObj != null)
            {
                foreach (var itemIssue in itemIssueListObj)
                {
                    ItemIssueViewModel itemIssueTemp = GetItemIssueCommon(itemIssue);

                    itemIssueVMList.Add(itemIssueTemp);
                }
            }
            return Json(new { data = itemIssueVMList, count = itemIssueVMList.Count() }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult UpdateItemIssueStatusToApprove(ItemIssue itemIssue)
        {
            string message = "";
            bool isSuccess = false;
            string urlIssue = string.Empty;
            if ((string)Session["GroupT"] == "raw")
            {
                urlIssue = "/ItemIssue/Index";
                cacheKeyIssue += WebConfigurationManager.AppSettings["GroupType"];
            }
            else
            {
                urlIssue = "/ItemIssue/SparePartsAndOtherIndex";
            }


            permissionIssue = (RoleSubModuleItem)cacheProvider.Get(cacheKeyIssue) ??
                         roleSubModuleItemService.GetRoleSubModuleItemBySubModuleIdandRole(urlIssue, Helpers.UserSession.GetUserFromSession().RoleId);
            if (permissionIssue.UpdateOperation == true)
            {
                var itemIssueObj = this.itemIssueService.GetItemIssue(itemIssue.Id);
                if (itemIssueObj != null)
                {
                    var userObj = UserSession.GetUserFromSession();
                    if (this.itemIssueService.UpdateItemIssueWhenApprove(itemIssueObj))
                    {
                        isSuccess = true;
                        message += "Item Issue approved successfully! ";
                    }
                    else
                    {
                        message = "Not enough balance.";
                    }
                }
                else
                {
                    message = "Item Issue not approved. Item Issue not found with the Issue Voucher No. '" + itemIssue.IsuueNo + "'.";
                }
            }
            else
                message = Resources.ResourceCommon.MsgNoPermissionToUpdate;

            return Json(new { message = message, isSuccess = isSuccess }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetIssueListByYear(int year, int month)
        {
            var demandList = new List<ItemIssue>();
            var grpType = WebConfigurationManager.AppSettings["GroupType"];
            if ((string)Session["GroupT"] == "raw")
            {
                demandList = this.itemIssueService.GetAllItemIssue().Where(iss =>
                {
                    var itemIssueDetail = iss.ItemIssueDetails.FirstOrDefault(); 
                    return itemIssueDetail != null && (iss.Date != null && iss.IsDeleted != true
                                                                             && iss.Date.Value.AddMinutes(timeZoneOffset).Year == year &&
                                                                             iss.Date.Value.AddMinutes(timeZoneOffset).Month == month
                                                                             && itemIssueDetail.Item.ItemCategory.ItemGroup.TypeId ==
                                                                             Convert.ToInt32(grpType));
                }).ToList();
            }
            else
            {
                demandList = this.itemIssueService.GetAllItemIssue().Where(iss =>
                {
                    var itemIssueDetail = iss.ItemIssueDetails.FirstOrDefault();
                    return itemIssueDetail != null && (iss.Date != null && iss.IsDeleted != true
                                                       && iss.Date.Value.AddMinutes(timeZoneOffset).Year == year &&
                                                       iss.Date.Value.AddMinutes(timeZoneOffset).Month == month
                                                       && itemIssueDetail.Item.ItemCategory.ItemGroup.TypeId !=
                                                       Convert.ToInt32(grpType));
                }).ToList();
            }

            
            List<ItemIssueViewModel> itemIssues = new List<ItemIssueViewModel>();
            if (demandList.Any())
            {
                foreach (var aIssue in demandList)
                {
                    ItemIssueViewModel itemIssue = new ItemIssueViewModel();
                    itemIssue.Id = aIssue.Id;
                    if (aIssue.Date != null) itemIssue.Date = aIssue.Date.Value.AddMinutes(timeZoneOffset);
                    itemIssue.Status = aIssue.Status;
                    itemIssue.IssueNo = aIssue.IsuueNo;

                    itemIssues.Add(itemIssue);
                }
            }
            return Json(itemIssues.OrderByDescending(iss => iss.Date), JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetItemIssue(Guid id)
        {
            var itemIssue = this.itemIssueService.GetItemIssue(id);
            ItemIssueViewModel itemIssueTemp = null;

            if (itemIssue != null)
            {
                itemIssueTemp = GetItemIssueCommon(itemIssue);
            }

            return Json(itemIssueTemp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetItemIssueListSearchKey(string id) //id is serachText
        {
            List<string> issueList = new List<string>();
            if (id != null)
            {
                issueList = this.itemIssueService.GetIssueListBySearchKey(id);
            }
            return Json(issueList, JsonRequestBehavior.AllowGet);
        }


        private ItemIssueViewModel GetItemIssueCommon(ItemIssue itemIssue)
        {
            ItemIssueViewModel itemIssueTemp = new ItemIssueViewModel();
            itemIssueTemp.Id = itemIssue.Id;
            if (itemIssue.Date != null)
            {
                itemIssueTemp.Date = itemIssue.Date.Value.AddMinutes(timeZoneOffset);
                itemIssueTemp.Datestring = itemIssue.Date.Value.AddMinutes(timeZoneOffset).ToString(dateTimeFormat);
            }
            itemIssueTemp.ItemDemandId = itemIssue.ItemDemandId;
            if (itemIssue.ItemDemand != null) itemIssueTemp.DemandNo = itemIssue.ItemDemand.DemandNo;
            itemIssueTemp.IsuueNo = itemIssue.IsuueNo;

            itemIssueTemp.IssuedBy = itemIssue.IssuedBy;
            if (itemIssue.Employee != null) itemIssueTemp.IssuedByName = itemIssue.Employee.FullName;
            itemIssueTemp.ReceivedBy = itemIssue.ReceivedBy;
            if (itemIssue.Employee1 != null) itemIssueTemp.ReceivedByName = itemIssue.Employee1.FullName;
            itemIssueTemp.AuthorisedBy = itemIssue.AuthorisedBy;
            if (itemIssue.Employee2 != null) itemIssueTemp.AuthorisedByName = itemIssue.Employee2.FullName;

            if (itemIssue.AuthorisedDate != null)
                itemIssueTemp.AuthoriseDatestring = itemIssue.AuthorisedDate.Value.AddMinutes(timeZoneOffset).ToString(dateTimeFormat);
            itemIssueTemp.Remarks = itemIssue.Remarks;
            itemIssueTemp.Status = itemIssue.Status;
            itemIssueTemp.DailyBallMill = itemIssue.DailyBallMill;

            if (itemIssue.Status != null)
            {
                try
                {
                    itemIssueTemp.StatusStringFromEnum = ((CommonEnum)itemIssue.Status).ToString();
                }
                catch { }
            }

            itemIssueTemp.IsApprovalRequired = itemIssue.IsApprovalRequired;

            List<ItemIssueDetailViewModel> issueDetailList = new List<ItemIssueDetailViewModel>();

            var grpByDetails = itemIssue.ItemIssueDetails.GroupBy(iss => iss.ItemId);
            foreach (var aitem in grpByDetails)
            {
                var issueDet = itemIssue.ItemIssueDetails.FirstOrDefault(iss => iss.ItemId == aitem.Key);
                ItemIssueDetailViewModel itemIssueDetTemp = new ItemIssueDetailViewModel();
                itemIssueDetTemp.Id = issueDet.Id;
                if (itemIssue.ItemDemand != null)
                {
                    var getdemdet = itemDemandDetailService.GetItemDemandDetailByDemandAndItem(itemIssue.ItemDemand.Id, issueDet.ItemId);
                    if (getdemdet != null)
                    {
                        itemIssueDetTemp.Quantity = Math.Round((double)getdemdet.Quantity, 3);
                    }
                }
                itemIssueDetTemp.ItemId = issueDet.ItemId;
                itemIssueDetTemp.UnitId = issueDet.UnitId;
                if (issueDet.UnitOfMeasurement != null)
                    itemIssueDetTemp.UnitIdName = issueDet.UnitOfMeasurement.Name;
                if (issueDet.Item != null)
                    itemIssueDetTemp.ItemCategoryId = issueDet.Item.ItemCategoryId;


                List<ItemInventoryViewModel> itemInventorys = new List<ItemInventoryViewModel>();
                var getInventory = itemInventoryService.GetAllItemInventory().Where(itm => itm.ItemId == issueDet.ItemId);
                foreach (var inv in getInventory)
                {
                    ItemInventoryViewModel inventory = new ItemInventoryViewModel();
                    inventory.BinCardId = inv.BinCardId;
                    if (inv.BinCard != null) inventory.BinCardName = inv.BinCard.CardNo;
                    inventory.Quantity = Math.Round((double)inv.Quantity, 3);

                    inventory.UnitId = inv.UnitId;
                    if (inv.UnitOfMeasurement != null) inventory.BinUnitIdName = inv.UnitOfMeasurement.Name;

                    var issueDetList = itemIssue.ItemIssueDetails.Where(iss => iss.ItemId == aitem.Key);
                    foreach (var issueDet1 in issueDetList)
                    {
                        if (inv.BinCardId == issueDet1.BinCardId)
                        {
                            inventory.QuantityIssued = Math.Round((double)issueDet1.Quantity, 3);
                            inventory.HandQtyForIssueUpdate = Math.Round((double)issueDet1.Quantity, 3);
                            break;
                        }
                    }

                    itemInventorys.Add(inventory);
                }
                itemIssueDetTemp.ItemInventoryViewModels = itemInventorys;
                itemIssueDetTemp.TotalStockBalance = itemIssueDetTemp.ItemInventoryViewModels.Sum(l => l.Quantity);
                itemIssueDetTemp.TotalStockBalance = Math.Round((double)itemIssueDetTemp.TotalStockBalance, 3);

                issueDetailList.Add(itemIssueDetTemp);
            }

            itemIssueTemp.ItemIssueDetails = issueDetailList;
            return itemIssueTemp;
        }

        public WorkflowactionSetting WorkflowactionSettingObj(int? employeeId, string url, int workFlowStatusEnum)
        {
            return this.workflowactionSettingService
                .GetAllWorkflowactionSetting().Where(app => app.EmployeeId == employeeId &&
                                                            app.SubModuleItem.UrlPath == url &&
                                                            app.WorkflowactionId == workFlowStatusEnum).FirstOrDefault();
        }


        [HttpPost]
        public JsonResult UpdateItemIssueStatus(ItemIssue itemIssue, List<ItemDemandDetailViewModel> demandDetList, string status)
        {
            string message = "";
            bool isSuccess = false;

            string urlIssue = string.Empty;
            if ((string)Session["GroupT"] == "raw")
            {
                urlIssue = "/ItemIssue/Index";
                cacheKeyIssue += WebConfigurationManager.AppSettings["GroupType"];
            }
            else
            {
                urlIssue = "/ItemIssue/SparePartsAndOtherIndex";
            }
            permissionIssue = (RoleSubModuleItem)cacheProvider.Get(cacheKeyIssue) ??
                               roleSubModuleItemService.GetRoleSubModuleItemBySubModuleIdandRole(urlIssue, Helpers.UserSession.GetUserFromSession().RoleId);

            if (permissionIssue.UpdateOperation == true)
            {
                var isIssReq = false;
                if (status == "approve")
                {
                    var statusReview = (int)WorkFlowActionEnum.Approve;
                    var user = UserSession.GetUserFromSession().EmployeeId;
                    WorkflowactionSetting workflowactionSettingObj =
                        WorkflowactionSettingObj(user, urlIssue, statusReview);
                    if (workflowactionSettingObj == null)
                    {
                        message = Resources.ResourceCommon.MsgNoPermissionToApprove;
                        return Json(new { message = message, isSuccess = isSuccess }, JsonRequestBehavior.AllowGet);
                    }
                }
                if (status == "reject")
                {
                    var statusReview = (int)WorkFlowActionEnum.ApproveReject;
                    var user = UserSession.GetUserFromSession().EmployeeId;
                    WorkflowactionSetting workflowactionSettingObj =
                        WorkflowactionSettingObj(user, urlIssue, statusReview);
                    if (workflowactionSettingObj == null)
                    {
                        message = Resources.ResourceCommon.MsgNoPermissionToReject;
                        return Json(new { message = message, isSuccess = isSuccess }, JsonRequestBehavior.AllowGet);
                    }
                }
                if (status == "reject")
                {
                    isSuccess = this.itemIssueService.RejectItemIssue(itemIssue.Id, UserSession.GetUserFromSession().EmployeeId);
                }
                else
                {
                    var isMinus = false;
                    foreach (var itemIssueDet in demandDetList)
                    {
                        var getCovertionRation = new Item();
                        if (itemIssueDet.ItemId != null)
                        {
                            getCovertionRation = itemService.GetItem((Guid)itemIssueDet.ItemId);
                        }
                        foreach (var inv in itemIssueDet.ItemInventoryViewModels)
                        {
                            if (inv.Quantity + inv.HandQtyForIssueUpdate < inv.QuantityIssued)
                            {
                                isMinus = true;
                                message = Resources.ResourceItemIssue.NoBalance;
                                break;
                            }
                            if (isMinus) break;
                        }
                    }

                    if (isMinus)
                    {
                        return Json(new { message = message, isSuccess = isSuccess }, JsonRequestBehavior.AllowGet);
                    }

                    var itemIssueObj = this.itemIssueService.GetItemIssue(itemIssue.Id);
                    if (itemIssueObj != null)
                    {
                        if (itemIssueObj.ItemIssueDetails != null)
                        {
                            foreach (var itemIssDet in itemIssueObj.ItemIssueDetails.ToList())
                            {
                                try
                                {
                                    if (this.itemIssueDetailService.DeleteItemIssueDetail(itemIssDet.Id,
                                        UserSession.GetUserFromSession().EmployeeId))
                                    { }
                                }
                                catch { }
                            }
                        }
                    }

                    List<ItemIssueDetail> issueDetails = new List<ItemIssueDetail>();

                    foreach (var itemIssueDet in demandDetList)
                    {
                        foreach (var inv in itemIssueDet.ItemInventoryViewModels)
                        {
                            ItemIssueDetail issueDetail = new ItemIssueDetail();
                            issueDetail.Id = Guid.NewGuid();
                            if (itemIssueDet.ItemId != null) issueDetail.ItemId = (Guid)itemIssueDet.ItemId;
                            issueDetail.ItemIssueId = itemIssue.Id;
                            issueDetail.UnitId = itemIssueDet.UnitId;
                            issueDetail.BinCardId = inv.BinCardId;
                            issueDetail.Quantity = inv.QuantityIssued;
                            if (!isIssReq)
                            {
                                if (itemIssueDet.ItemId != null)
                                {
                                    var chkReq = itemService.GetItem((Guid)itemIssueDet.ItemId);
                                    if (chkReq != null)
                                    {
                                        if (chkReq.IsApprovalRequiredForIssue == true)
                                        {
                                            isIssReq = true;
                                        }
                                    }
                                }
                            }
                            try
                            {
                                this.itemIssueDetailService.CreateItemIssueDetail(issueDetail,
                                    UserSession.GetUserFromSession().EmployeeId);
                            }
                            catch
                            {

                            }
                        }
                    }
                }

                var itemDemandObjAttach = this.itemIssueService.GetItemIssue(itemIssue.Id);
                if (itemDemandObjAttach != null)
                {
                    itemDemandObjAttach.IsuueNo = itemIssue.IsuueNo;
                    itemDemandObjAttach.Date = itemIssue.Date != null ? itemIssue.Date.Value.ToUniversalTime() : DateTime.UtcNow;
                    itemDemandObjAttach.ItemDemandId = itemIssue.ItemDemandId;
                    itemDemandObjAttach.IssuedBy = itemIssue.IssuedBy;
                    itemDemandObjAttach.ReceivedBy = itemIssue.ReceivedBy;
                    itemDemandObjAttach.AuthorisedBy = UserSession.GetUserFromSession().EmployeeId;
                    itemDemandObjAttach.AuthorisedDate = itemIssue.AuthorisedDate != null ? itemIssue.AuthorisedDate.Value.ToUniversalTime() : DateTime.UtcNow;
                    itemDemandObjAttach.Remarks = itemIssue.Remarks;
                    itemDemandObjAttach.DailyBallMill = itemIssue.DailyBallMill;
                    if (isIssReq)
                    {
                        itemDemandObjAttach.IsApprovalRequired = true;
                    }
                    else
                    {
                        itemDemandObjAttach.IsApprovalRequired = false;
                    }
                    if (status == "approve")
                    {
                        itemDemandObjAttach.Status = (int)CommonEnum.Approved;
                    }
                    else if (status == "reject")
                    {
                        itemDemandObjAttach.Status = (int)CommonEnum.Rejected;
                    }
                    else
                    {
                        itemDemandObjAttach.Status = itemDemandObjAttach.Status;
                    }
                    if (this.itemIssueService.UpdateItemIssue(itemDemandObjAttach))
                    {
                        isSuccess = true;
                        if (status == "approve")
                        {
                            message = string.Format(Resources.ResourceCommon.CMsg_approve,
                                Resources.ResourceItemIssue.LblItemIssue);
                        }
                        else if (status == "reject")
                        {
                            message = string.Format(Resources.ResourceCommon.CMsg_reject,
                                Resources.ResourceItemIssue.LblItemIssue);
                        }
                        else
                        {
                            message = string.Format(Resources.ResourceCommon.CMsg_update,
                                Resources.ResourceItemIssue.LblItemIssue);
                        }

                    }
                    else
                    {
                        if (status == "approve")
                        {
                            message = string.Format(Resources.ResourceCommon.CMsg_notapprove,
                                Resources.ResourceItemIssue.LblItemIssue);
                        }
                        else if (status == "reject")
                        {
                            message = string.Format(Resources.ResourceCommon.CMsg_notreject,
                                Resources.ResourceItemIssue.LblItemIssue);
                        }
                        else
                        {
                            message = string.Format(Resources.ResourceCommon.CMsg_notupdate,
                                Resources.ResourceItemIssue.LblItemIssue);
                        }
                    }
                }
                else
                {
                    message = message = string.Format(Resources.ResourceCommon.CMsg_notapprove,
                        Resources.ResourceItemDemand.LblItemDemand);
                }
            }
            else
            {
                isSuccess = false;
                message = Resources.ResourceCommon.MsgNoPermissionToUpdate;
            }

            return Json(new { message = message, isSuccess = isSuccess }, JsonRequestBehavior.AllowGet);
        }
    }

    public class ItemIssueViewModel
    {
        public ItemIssueViewModel()
        {
            this.ItemIssueDetails = new List<ItemIssueDetailViewModel>();
        }
        public Guid Id { set; get; }
        public DateTime? Date { set; get; }
        public string AuthoriseDatestring { set; get; }
        public string Datestring { set; get; }
        public string IssueNo { get; set; }
        public string DemandNo { get; set; }
        public string IsuueNo { get; set; }
        public Nullable<bool> IsApprovalRequired { get; set; }
        public Nullable<System.Guid> ItemDemandId { get; set; }
        public Nullable<int> IssuedBy { get; set; }
        public Nullable<int> ReceivedBy { get; set; }
        public Nullable<int> AuthorisedBy { get; set; }
        public string IssuedByName { set; get; }
        public string ReceivedByName { set; get; }
        public string AuthorisedByName { set; get; }
        public Nullable<System.DateTime> AuthorisedDate { get; set; }
        public string Remarks { get; set; }
        public int? Status { get; set; }
        public string StatusStringFromEnum { get; set; }
        public int? DailyBallMill { get; set; }
        public virtual ICollection<ItemIssueDetailViewModel> ItemIssueDetails { get; set; }
    }

    public partial class ItemIssueDetailViewModel
    {
        public ItemIssueDetailViewModel()
        {
            this.ItemInventoryViewModels = new List<ItemInventoryViewModel>();
        }
        public System.Guid Id { get; set; }
        public System.Guid ItemIssueId { get; set; }
        public System.Guid ItemId { get; set; }
        public string ItemIdName { get; set; }
        public double Quantity { get; set; }
        public Nullable<int> UnitId { get; set; }
        public string UnitIdName { get; set; }
        public double? TotalStockBalance { set; get; }
        public int? ItemCategoryId { set; get; }
        public Nullable<int> BinCardId { get; set; }
        public Nullable<System.Guid> ItemDemandDetailId { get; set; }
        public List<ItemInventoryViewModel> ItemInventoryViewModels { get; set; }
    }
}